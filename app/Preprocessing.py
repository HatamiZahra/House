{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Preprocessing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Creating a copy of the datasets\n",
    "preprocessing_train_df = train_df.copy()\n",
    "preprocessing_test_df = test_df.copy()\n",
    "\n",
    "# Saving datasets indexes\n",
    "train_idx = train_df.shape[0]\n",
    "test_idx = test_df.shape[0]\n",
    "\n",
    "#Saving HouseID for Kaggle submission template\n",
    "houseId = test_df['Id']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop Id\n",
    "preprocessing_train_df.drop(['Id'], axis=1, inplace=True)\n",
    "preprocessing_test_df.drop(['Id'], axis=1, inplace=True)\n",
    "\n",
    "# Drop the two outliers houses (#523 and #1298)\n",
    "preprocessing_train_df = preprocessing_train_df[preprocessing_train_df.GrLivArea < 4500]\n",
    "preprocessing_train_df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABH8AAAHsCAYAAABL4QHIAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOzdeZyNdf/H8fec2YyZYexkbzBk7LKPLTJikl1JCUWLJZVSKPsuS4kUSYSEhKwRZckyltGILMMw9nU2s5zr98f5NTeNZZZz5syceT0fD4+555xzfa7POfOte7z7Lk6GYRgCAAAAAACAQzLZuwEAAAAAAADYDuEPAAAAAACAAyP8AQAAAAAAcGCEPwAAAAAAAA6M8AcAAAAAAMCBEf4AAAAAAAA4MMIfAAAk+fn56dq1a/c8tnz5cvXu3VuSNG3aNK1cufKhNT777DNt2rTJZj3aUmhoqJo1a6Z27dopPDz8nucuXbqkAQMGKCgoSEFBQerYsWOK3ufdn9/DNG3aVC1atFCbNm303HPPqVWrVhozZozMZnOy1168eFFdunRJ+RtLo7s/j6NHj+qll16y+T3/1a1bN61bt87qdW/duqU2bdqoTZs2at68uSpXrpz0/fjx461+v//64osv1LhxYw0ePNjm97rb2bNn1bdvX0kZN34AAMhsXOzdAAAAWUH//v0f+Zrdu3erTJkyGdCN9W3evFm1a9fW6NGjkz03ZMgQ1atXT1OnTpUk/fPPP3r++edVunRp+fr6WuX+kyZNUqVKlSRJcXFx6tatmxYtWqQXX3zxntcVKlRIixcvtso9H+buzyM8PFyHDx+2+T1tLVeuXPrpp58kWcbqyJEjk77PCMuWLdOkSZNUs2bNDLunJJ0/f16nTp2SlHHjBwCAzIbwBwCAFPjggw9UtmxZ9ezZU9OnT9fGjRvl6uqqPHnyaOzYsdq4caNCQkI0YcIEOTs7q06dOho+fLiOHj0qJycnBQQEaODAgXJxcdFvv/2mSZMmyWQyqUKFCtqxY4cWLVqkP//8U8uWLVNMTIy8vLw0e/ZsffLJJwoLC9ONGzfk6empSZMm6fHHH1e3bt1UsWJFHThwQNeuXVOnTp105coV/fnnn4qJidHUqVPl5+eX7H18/vnnWrNmjZydnVW6dGkNHTpUO3fu1Pfff6/ExETFxsZq8uTJ91xz+fJlxcbGymw2y2QyqUyZMvriiy+UK1cuSZa/1C9ZskTx8fG6efOmXn31Vb3wwgv31Lh9+7ZGjx6tY8eOKT4+XnXr1tWgQYPk4pL8VxE3NzfVqFFDJ0+eVHh4uLp27SpfX1+dO3dO48aNU48ePRQcHKyEhARNnDhRW7dulbOzs6pVq6aPP/5Ybm5u+uKLL7RhwwaZzWYVLVpUH3/8sQoVKnTPfaKjo+/7+YaEhNzzeVy6dEmxsbFq06aNli9frtOnT2v06NG6ceOGEhMT1a1bN3Xo0EG7d+/W6NGjlTNnTkVFRenHH3+Um5tb0v22bNmi2bNnKy4uTteuXdNzzz2nAQMGpGocLlmyRAsWLJDJZFL+/Pk1dOhQlS5dWteuXdPgwYN15swZ+fj4qECBAipbtmzSjJeUWL58earGX9WqVbV//35FRESobt26GjlypMxms0aOHKn9+/fL1dVVxYoV09ixY/XRRx/p4sWL+uijj9S/f39Vr15dn3zyic6dOyfDMPTcc8+pV69e9/15v/vuu6pfv75CQkKUmJiofv36acmSJTp58qT8/f01ZcoUmUwmzZo1S5s3b1ZsbKxiYmL0/vvvq2nTphoyZIguXryonj17avjw4QoKClJwcLDi4+M1btw47dy5U87OzqpcubIGDx4sLy8vNW3aVG3bttXOnTsVERGhNm3apPpnBQBApmIAAACjXLlyRuvWrY1nn3026U+jRo2M1157zTAMw3j//feNr776yjh//rxRvXp1486dO4ZhGMbXX39tbNy40TAMw3jxxReNX375xTAMwxg0aJAxcuRIw2w2G3fu3DF69OhhzJ4927h27ZpRq1YtIzQ01DAMw1i+fLlRrlw54+zZs8aPP/5oPPnkk8bt27cNwzCMX375xRg5cmRSj0OHDjVGjBiRdK+33nrLMAzDOHDggFGuXDlj8+bNhmEYxujRo40hQ4Yke4/Lli0zOnfubERFRRmGYRjTp083evTokfS/hw8fft/PZseOHUb9+vWNWrVqGX369DHmzJljXLhwwTAMw4iMjDQ6depkXLt2zTAMwwgODjaqVq1qGIZh/Pjjj0mf3wcffGB8++23hmEYRkJCgvHuu+8aX375pWEYhtGkSRPj0KFDSfe7cOGCERgYaKxbt844e/asUa5cOWPPnj2GYRjG2bNnk+rPnz/f6Nq1qxETE2MkJiYa/fv3N1asWGGsWLHCGDBggBEfH28YhmEsXrzY6NWrV7L39bDP9+7P4+57xsfHG88884wREhJiGIZh3Lp1y2jZsqURHBxs7Nq1yyhfvrwRHh6e7F5ms9l48cUXjVOnTiW9xwoVKhhXr15N9tq7x9F/fw7NmjVLuubHH380WrZsaZjNZuPtt982JkyYYBiGYVy8eNGoX7++MX369GQ1/rVr1y6jVatW9zyW2vHXr18/IzEx0bh9+7bRoEEDY+fOncaePXuMwMBAw2w2G4ZhGBMmTDD27dtnGMa9P+euXbsac+fOTfoMg4KCjNWrV9/3512uXDlj06ZNhmEYxrBhw4wmTZoYt2/fNmJjY4369esb+/btM8LDw41u3boZMTExhmEYxurVq43WrVsne693/yynTZtmvPXWW0ZcXJyRmJhofPDBB8bQoUOTeh03blzSz6pSpUrGmTNnHvh5AgCQ2THzBwCA/zd//nzlzZs36fvly5dr/fr197ymUKFCKl++vNq2bauGDRuqYcOGqlu3brJa27Zt0/fffy8nJye5ubmpS5cumj9/ftJSqfLly0uS2rZtq1GjRiVd5+fnJy8vL0lSYGCgihcvrgULFigsLEx//vmnqlWrlvTa5s2bS5KKFy8uSQoICJAklShRQn/++ed9e2rXrp1y5swpSXrppZc0a9YsxcXFPfRzqVu3rrZu3aoDBw5o79692rJliz7//HPNnz9flStX1qxZs/Tbb7/p9OnTOnr0qKKjo5PV2Lp1qw4fPqxly5ZJkmJjY+95/t1331WOHDlkNpvl6uqqjh07qkWLFgoPD5eLi4uqVq2arOaOHTvUpk0b5ciRQ5KSlqX1799fhw8fVvv27SVJZrNZMTExya5/1Od7P6dPn9aZM2f04YcfJj0WGxurv/76S76+vipSpIiKFi2a7DonJyfNmjVLW7du1erVq3XixAkZhnHfvh5k+/bteuaZZ5LGaLt27ZKWpf32229asWKFJKlgwYIKDAxMcd27pWb8NWnSRCaTSV5eXipZsqRu3rypunXrytnZWR07dlSDBg3UokULVa5c+Z57REdHa//+/Zo7d64kydvbW+3atdO2bdtUpUqVZD9vV1dXNW3aVJJlbFerVi2px4IFC+rmzZuqXr26JkyYoJ9//llhYWE6ePCgoqKiHvpet23bprfffluurq6SLHstvfnmm0nPP/XUU5Is/8zny5dPN2/eTPpnDQCArIbwBwCAVDCZTPruu+90+PBh7dy5U2PGjFFAQIAGDRp0z+vMZrOcnJzu+T4hIUHOzs4yDCNZzX/9G8xI0qJFi7R06VJ17dpVQUFB8vHxuWcz5ruXFElK+kvsgzyop4e5evWqZsyYoaFDh6pmzZqqWbOm+vTpo48++kgrV65UwYIF1blzZ3Xq1Ek1atRQYGCgtmzZct97T5s2LWmPoFu3bt3Ty917/vyXm5vbfZeH/fexK1euyGw2y2w2q1evXklLz+Li4nTz5s1k1z/q872fxMREeXt737NXzpUrV+Tt7a0DBw7c8/O7W3R0tNq2batmzZqpZs2aat++vTZt2pRsLDzM/TbANgxDCQkJcnFxuafW3WMqNVIz/v4N3SRLuGUYRtK+Qvv379euXbs0YMAA9ezZU127dr3nffz3fd89Fv/783Z1db1nrNxvnB85ckRvvPGGunfvrvr16+vJJ5/U8OHDH/pe7/fPQ3x8fNL37u7uyd4fAABZFad9AQCQCkePHlXr1q3l6+ur3r17q3v37kmbATs7Oyf9BbZBgwb67rvvZBiG4uLitHTpUtWrV0/Vq1dPmiEjSevXr08WhPzr999/V9u2bdWxY0eVLl1av/76qxITE9Pce0BAgH788cekmTkLFizQk08+mSxEulvu3Lm1Y8cOffvtt0l/+Y2JidGZM2f0xBNPKCQkRHnz5tUbb7yhBg0aJAU//+2zQYMG+uabb5I+j9dff13fffddmt+LZJmRtHr1asXFxclsNuuTTz7RmjVr1KBBAy1btkyRkZGSLCe1/Teck1L++bq4uCgxMVGGYah06dLKkSNHUvgTERGh1q1bKyQk5KG9hoWFKTIyUgMGDFDTpk21e/fupL5TKiAgQGvXrk06le7HH3+Uj4+PSpYsqUaNGiXNqrp+/bo2bdp03zGVGmkZf1u2bFH37t1VrVo19e3bV88991yyz8bLy0tVqlTRwoULJVn2g1q5cqXq1auX5l737Nkjf39/vfLKK6pVq5Y2b96c1Kuzs/M9oc6/AgIC9P333ys+Pl5ms1kLFy5U/fr109wDAACZGTN/AABIhfLly6tly5Zq3769cubMqRw5cmjIkCGSLEeWT5kyRfHx8RoyZIhGjRqloKAgxcfHKyAgQH369JGbm5umTJmi999/XyaTSf7+/nJxcZGHh0eye/Xo0UPDhg1L+kt91apVdezYsTT33qFDB0VERKhjx44ym80qWbKkJk2a9NBrXFxc9PXXX2vixIlasGCBcubMKScnJ7Vt21YdOnRQTEyMli1bpsDAQDk5OalWrVrKmzevwsLC7qnz0UcfafTo0UmfR7169dSrV680vxdJ6tKli86dO6d27drJMAzVqlVL3bp1k8lk0sWLF9WpUyc5OTmpSJEiGjduXLLrU/r5FihQQJUrV1arVq20cOFCzZw5U6NHj9ZXX32lhIQE9e/fXzVq1NDu3bsf2Kufn58aN26sli1bys3NTeXKlVOZMmUUFhamEiVKJHv9oEGD7jkS/YUXXtB7772n7t276+WXX5bZbFbevHk1e/ZsmUwmDR48WEOGDEmaofPYY4/dMzMnLdIy/ho2bKht27apdevWypkzp3Lnzq2RI0cme92kSZM0YsQILV++XHFxcQoKClK7du107ty5NPXaunVrbdiwQS1btpTZbFaTJk108+ZNRUZGqkyZMnJ3d1eHDh306aefJl3z+uuva/z48XruueeUkJCgypUra+jQoWm6PwAAmZ2TwRxWAAAyTGRkpGbOnKm+ffvKw8NDR44cUe/evbV9+/Z0z9RA9rVw4UI98cQTqlatmuLi4vTCCy+ob9++atSokb1bAwAAmQAzfwAAyEBeXl5ydXVVhw4d5OLiIhcXF02dOpXgB+lSpkyZpKPW4+PjFRgYSPADAACSMPMHAAAAAADAgbHhMwAAAAAAgAMj/AEAAAAAAHBghD8AAAAAAAAOLMM3fN6/f/99j7MF7ufOnTtyd3e3dxvIIhgvSCnGClKD8YLUYLwgpRgrSA3GC1Lizp07qlq16n2fy/Dwx8nJSRUqVMjo2yKLCg0NZbwgxRgvSCnGClKD8YLUYLwgpRgrSA3GC1IiNDT0gc+x7AsAAAAAAMCBEf4AAAAAAAA4MMIfAAAAAAAAB0b4AwAAAAAA4MAIfwAAAAAAABxYisKfgwcPqlu3bskeX716tTp27KguXbpo2LBhMpvNVm8QAAAAAAAAaffI8GfOnDkaMmSI7ty5c8/jsbGxmjp1qr799lstXrxYkZGR2rJli80aBQAAAAAAQOo9MvwpUaKEZsyYkexxNzc3LV68WB4eHpKkhIQEubu7W79DAAAAAAAApJnLo17QokULhYeHJ3vcZDIpf/78kqQFCxYoOjpa9evXf+QNzWazQkND09AqsqPY2FjGC1KM8YKUYqwgNRgvSA3GC1KKsYLUYLwgvR4Z/jyM2WzWxIkTderUKc2YMUNOTk6PvMZkMqlChQrpuS2ykdDQUMYLUozxgpRirCA1GC9IDcYLUoqxgtRgvCAlHhYQpiv8GTZsmNzc3DRz5kyZTBwcBgAAAAAAkNmkOvz5+eefFR0dLX9/fy1btkw1a9bUyy+/LEl66aWX1Lx5c6s3CQAAAAAAgLRJUfhTrFgxLV26VJIUFBSU9PjRo0dt0xUAAAAAAACsgrVaAAAAAAAADozwBwAAAAAAwIER/gAAAAAAADgwwh8AAAAAAAAHRvgDAAAAAADgwAh/AAAAAAAAHFiKjnoHAADAo12/Lt26Zdt75Mol5clj23sAAADHQvgDAABgJbduSevX2/YeLVoQ/gAAgNRh2RcAAAAAAIADI/wBAAAAAABwYIQ/AAAAAAAADozwBwAAAAAAwIER/gAAAAAAADgwwh8AAAAAAAAHxlHvAAAgRa5ftxxlbiu5cnGEOQAAgC0Q/gAAgBS5dUtav9529Vu0IPwBAACwBZZ9AQAAAAAAODDCHwAAAAAAAAdG+AMAAAAAAODACH8AAAAAAAAcGOEPAAAAAACAAyP8AQAAAAAAcGCEPwAAAAAAAA6M8AcAAAAAAMCBEf4AAAAAAAA4MBd7NwAAACBJCQlSWJht75Erl5Qnj23vAQAAkNkQ/gAAgEwhKkratcu292jRgvAHAABkPyz7AgAAAAAAcGCEPwAAAAAAAA6M8AcAAAAAAMCBEf4AAAAAAAA4MMIfAAAAAAAAB0b4AwAAAAAA4MAIfwAAAAAAABwY4Q8AAAAAAIADI/wBAACZwrVr0rFjUlycvTsBAABwLC72bgAAAGRfN25IwcGWP8ePS2az5OIi+flJ/v5SpUpSgQL27hIAACBrI/wBAAAZ6upVaf9+S+Bz8qRkGFLhwlLPnpbg59gxKSREWrLE8qdQof8FQWXKSK6u9n4HAAAAWQvhDwAAyBBnz0rffSedPm35vlgxKShIqlZNeuwxqU4dadcuqWpVqVMn6dIlSwgUEiL99pu0ebOUM6fUvr1Ur55kYvE6AABAihD+AAAAm7tyRZo+3RLYtGtnCXwKFnz4NQULSk2bWv7ExUl//y1t2CAtWGAJiV580TJjCAAAAA9H+AMAAGzq9m1p2jQpIUEaNEgqUiT1NdzcLMu+/P2lHTukZcukkSOlli2lFi1YCgYAAPAwhD8AAMBm7tyRPvtMun5dGjAgbcHP3ZycpPr1LUHQ0qXSzz9Le/daZgGVKWOdngEAABwNq+UBAIBNJCZKc+ZIYWFSr17WDWdy5bLUfOsty5KwiROlhQul6Gjr3QMAAMBRMPMHAABYnWFYwpjDh6WuXS2bONtCpUpS2bKWGUCbN0sHD0ovvyxVrGib+wEAAGRFzPwBAABWt2qV9McfUqtWUsOGtr1XjhxSx47S4MGW08CmT5cWL7bMCAIAAADhDwAAsLLffpPWrpUaNLAc5Z5RSpaUPvzQcjrYli3SmDHSmTMZd38AAIDMivAHAABYTXCw9P33luVYL7xg2aA5I7m5SZ07S/37SzEx0rhx0rp1ktmcsX0AAABkJoQ/AADAKs6elb7+WipVSnrtNcnZ2X69PPGENHSoVKWKtGKFNGWKdPWq/foBAACwJ8IfAABgFStXWmbevPWW5au9eXlZQqju3S3B1IgR0vLlls2oAQAAshPCHwAAkG7//COFhEgtWlhCl8zCyUmqW9cyC6hoUWngQMueQIcP27szAACAjEP4AwAA0m3VKilXLqlxY3t3cn/580vvviuNGiUdOiRVqyb16yfduGHvzgAAAGyP8AcAAKTL0aPS339LLVtK7u727ubBTCbpxRelY8csy8E+/1wqW1b66is2hAYAAI6N8AcAAKSZYUg//STlySMFBNi7m5TJl0+aOVPau1fy85NefVWqU0favdvenQEAANgG4Q8AAEizkBDp5EnpmWckV1d7d5M61apJ27dLCxZI4eGWAOjll6W//rJ3ZwAAANZF+AMAANLk31k/+fNL9evbu5u0cXKyLAX7+2/pvfekpUulihUtYdamTZwMBgAAHAPhDwAASJPgYMsR6q1bS87O9u4mfby9pQkTpDNnLEfC79snNW9umR3000+5FRdn7w4BAADSjvAHAACkmtks/fyzVLiwVLu2vbuxngIFLMfCh4VJX38tJSRIgwc/plKlpLFjpWvX7N0hAABA6hH+AACAVNuzRzp/Xnr2WcspWo4mRw6pRw/p8GHpyy/PyN9f+vBDqVgxy0lhhw7Zu0MAAICUc8Bf1wAAgC0lJkqrV1uCkGrV7N2NbTk5SQ0aRGnDBkvg07Wr9N13UpUqUqNG0g8/SPHx9u4SAADg4Qh/AABAquzcKV265Lizfh6kUiVpzhzLyWATJ1r2O+rUSSpdWho1yvKZAAAAZEbZ6Fc2AACQXvHx0po1UqlSUuXK9u7GPvLmld59Vzp+3LLvUcWKln2CiheXBg2Sbt2yd4cAAAD3IvwBAAAp9vvvlk2P27SxLInKzpydLSedrV8vHT1q2QtoxQpp2DBpyxbLptgAAACZAeEPAABIkZgYae1aqWxZqUIFe3eTufj5STNmSOvWWWZFLV5sOR3s1Cl7dwYAAJDC8OfgwYPq1q1bssd//fVXtW/fXp07d9bSpUut3hwAAMg8Vq2yLGkKCmLWz4P4+kr9+0uvvmr5rMaPlxYskCIj7d0ZAADIzlwe9YI5c+Zo1apV8vDwuOfx+Ph4jR07VsuWLZOHh4eef/55NWnSRAUKFLBZswAAwH5++EEqXFgqV87enWRuTk5SzZqSv79lT6Bff5WCg6V27aR69bLXJtkAACBzeOSvHyVKlNCMGTOSPX7ixAmVKFFCuXPnlpubm2rUqKG9e/fapEkAAGBfx45Je/dawgtm/aRMjhxSx47SkCFSkSKWGUBTp0qxsfbuDAAAZDePnPnTokULhYeHJ3s8MjJS3t7eSd97enoqMgVzms1ms0JDQ1PZJrKr2NhYxgtSjPGClGKspN6nnxaQs3M+lS59SRERttnJODo6lyIibHtU1pUrroqOvpyi1yYkJCgsLEyhoaGaOXOmrl+/rsjISEVFRSkyMlLR0dFycXGRt7e3cuXKJW9vb+XMWVA3bxZRvnxPKF++8nJ19ZTJJHXtKu3f76HVq3Nr4sR4vfjiNeXIYdj8PSDj8e8XpBRjBanBeEF6PTL8eRAvLy9FRUUlfR8VFXVPGPQgJpNJFdglEikUGhrKeEGKMV6QUoyV1ElMtGz03KiRVK5cIZvdJ2dOqUgRT5vVl6T8+aWSJfPf9znDMHTw4EGtX79eBw4cUGhoqO7cuSNJypMnj4oUKaI8efKoVKlSSYFPfHy8bty4oevXr+v69esKDz+oS5fWSzIkOSlfvjIqUqSqSpSoq8DAJnrsMSfNmeOmJUsKq39/6T+r6tP9HmB//PsFKcVYQWowXpASDwsI0xz++Pr6KiwsTDdu3FDOnDm1d+9e9ezZM63lAABAJrVxo3TunGX5kiM6ceKEVq9erTVr1ujs2bNyc3NTpUqV9Pzzz6tSpUry9PRUw4YN5ZSC9W5hYdKqVbd14cIhnT9/QBERB3T8+DqFhPwgNzcvlS37tDp1aqMffqipqVNN6t/fEnoBAADYUqrDn59//lnR0dHq3LmzPvjgA/Xs2VOGYah9+/YqVMh2/zUQAADYx7x5Ur580lNPSVu22Lsb60hMTNS6des0d+5c/fXXXzKZTKpTp45ef/11NWvW7J7ZzKGhoSkKfv7l7u6tkiXrq2TJ+pIkszlR4eF7FBq6SseOrVN8/HL5+xdRREQ7ffppNw0YkFuetp3wBAAAsrkUhT/FihVLOso9KCgo6fGmTZuqadOmtukMAADY3bVr0sqVUu/ekpubvbtJv8TEBK1atVazZs3SqVOn5Ovrq8GDByswMFAFCxa0yT1NJmeVKFFHJUrUUdOmQ3XixGb99ddPunPncyUmztdnn72sXr1eUr58uWxyfwAAgDQv+wIAAI7v+++luDjplVfs3Un6mM2JCg39WUuXztK5c2EqV66cpk6dqubNm8uUgWevu7p6qHz51ipfvrUuX/5bGzZ8rkuXPtf8+QtUs+bLql37Jbm7e2VYPwAAIHvIuN92AABAljNvnlSlilStmr07SbvLl49q8eLntWHDYOXIkVPTp0/XihUr1KJFiwwNfv6rQAE/de06XXXrLld09JPat2+G5s59WqGhq2QYaTsJDAAA4H4IfwAAwH0dPizt25d1Z/3Ex8do+/ZJWriwg27fPq+WLSfqs89+zPDZPo9Sp04FtW//mc6eXaaoqBJat+59rVzZW7dunbN3awAAwEFknt98AABApvLNN5Krq9S1q707Sb2wsD/07bfPau/er1Wx4nN6+eXVKl++dao2bs5IFSpIL71UUcePL1S+fB/p3Ll9+vbbZxUcvEBmc6K92wMAAFkc4Q8AAEgmPl767jspKEjKn9/e3aRcQkKcfv11hJYv7yVnZ1d17DhfzZuPUo4cPvZu7ZGqVpXq1nXWzp0vqkmTVSpatIa2bh2jpUu76uZNZgEBAIC0I/wBAADJrF0rXbqUtZZ83bx5TkuXdtXBg9+rRo1X9OKLK1SsWC17t5UqnTtLuXNLS5cW1TPPzFZg4ARdu3ZSixa11+nT2+3dHgAAyKIIfwAAQDLz5kmFC0uBgfbuJGVOntyqhQvb68aNMAUFzVDDhoPk4uJu77ZSzcNDevll6cIF6aefnFShQpBeeOEHeXkV1ooVvbVz5+cym832bhMAAGQxhD8AAOAely5Ja9ZI3bpJLi727ubhzOYE/f77p/rpp9eVK9djeuGFZSpTppm920qXChWkxo2lX3+Vjh2TfHxKqkuX71WhwrPateszDRvWR9evX7d3mwAAIAsh/AEAAPf47jspIUHq3t3enTxcfHy0Vq16U3v2fCl//47q0mWRfHxK2Lstq2jXTipQwLLpdmys5OrqoRYtxuqppz7RwYO71KFDBx0/ftzebQIAgCyC8AcAACQxDNh5ZUEAACAASURBVMuSr1q1pCeesHc3DxYdfU0//NBdp0//rqZNP1bz5iPk4pLD3m1Zjbu7JXy7dk1atszymJOTkypX7qxJkxYqPj5e3bp10/79++3aJwAAyBoIfwAAQJJ9+6SQkMy90fONG2e0ZMnzunLlmIKCpqtKlS72bskmfH2l5s2l7dstP5N/+flV0vfff688efKoR48e+vXXX+3XJAAAyBIIfwAAQJJ586QcOaQumTRPuXjxiJYseUGxsTfVocM8+fo+Ze+WbOrZZ6XHHpMWLJCiov73eNGiRbVw4UL5+fmpb9+++uGHH+zXJAAAyPQy+TaOAAAgJa5fl27dSl+N2FjLfj9PPy3dvGn5c7eYmPTVT6+wsB36+ee+8vDwUdu2C5Q3b2n7NpQBXF0ts7DGjpUWL5Z69vzfc3nz5tXcuXM1YMAADRs2TFeuXFGfPn3k5ORkv4YBAECmRPgDAIADuHVLWr8+fTWCgy11Spe+f606ddJXPz3OnNmpn356Q3nylFLbtl/Ky6ug/ZrJYCVKSK1aST//LFWrJrVo8b/nPD09NXPmTA0ZMkTTp09XbGysBgwYQAAEAADuwbIvAAAgyRL+eHpKfn727uReZ8/++f/BT0l16DAvWwU//2rZ0hICLV6cfAaWq6urxo4dq06dOunLL7/UzJkz7dMkAADItAh/AACAEhKkw4elypUlZ2d7d/M/4eF7tXJlH+XOXUzt28+Th0cee7dkF87OUqdOlqV4336b/HmTyaSPP/5Ybdu21WeffaY5c+ZkfJMAACDTIvwBAAA6dkyKjrYsK8oszp8P1sqVvZUrVxG1bz9POXPmtXdLdlW2rFSxovTFF8n3Y5IsAdDIkSMVFBSkKVOm6JtvvsnwHgEAQOZE+AMAABQcLLm7S088Ye9OLCIiDmrFilfl5VVQ7dvPk6dnfnu3lCk895x044Y0Zcr9n3d2dtaYMWMUGBio8ePHa+HChRnbIAAAyJQIfwAAyObMZunAAcnf33K6lL1du3ZKK1f2lodHPnXo8E223OPnQf7d/HnKFOny5fu/xsXFRRMmTNBTTz2lUaNGaeXKlRnbJAAAyHQIfwAAyOZOnrSc8pUZlnxFRV3RihWvyWRyUbt2X8nLq5C9W8p03n7bskRv7NgHv8bV1VVTpkxR3bp1NXToUO3YsSPjGgQAAJkO4Q8AANlccLDk4mKZ+WNPsbFRWrmyj6Kjr6pNmy/k41Pcvg1lUmXKSC+/LM2cKZ09++DXubm5adq0aXr88cfVr18//f333xnXJAAAyFQIfwAAyMYMwxL+lC8veXjYrw+zOUFTpw7U5cuhatVqsgoXrmS/ZrKAjz+2/OxGjHj467y9vTV79mx5eXmpd+/eunjxYsY0CAAAMhXCHwAAsrGzZ6WrV+275MswDG3ePELBwdvUtOkwPf54E/s1k0WULCn16SPNm2c5qe1hChcurFmzZikyMlJ9+vRRZGRkxjQJAAAyDcIfAACysQMHJCcnqUoV+/WwZ8+XCgn5Qc8995oqV+5sv0aymA8/tJzQ9vHHj35t+fLlNW3aNB0/flwDBgxQfHy87RsEAACZBuEPAADZWHCwVLas5O1tn/ufOPGr/vhjqsqXb60uXQbYp4ksqlAhacAAafFiS4j3KPXr19fw4cP1xx9/aPTo0bZvEAAAZBqEPwAAZFMXL0rnz9tvyde1aye1bt0gFSxYUc2bj5STk5N9GsnC3ntP8vGRhgxJ2evbt2+vnj17asmSJVq2bJltmwMAAJkG4Q8AANlUcLDla9WqGX/vO3dua9WqN+Xs7K5nn50hF5ccGd+EA/Dxkd5/X1qzRvrjj5Rd8/bbb6tevXoaMWKEDh48aNsGAQBApkD4AwBANhUcLJUqJeXNm7H3NQyzfvllkG7eDFfr1lPl7V0kYxtwMH37WpaAffih5QSwR3F2dtbkyZNVqFAh9e/fX5cvX7Z9kwAAwK4IfwAAyIauXZNOn7bPrJ+dOz/TqVNb1bjxYBUr9mTGN+BgPD0ty762bZM2bEjZNT4+PpoxY4Zu3rypt99+W3FxcbZtEgAA2BXhDwAA2dC/GwRn9H4/x49v0O7dX8jfv70qV34+Y2/uwF57zTKLa9iwlM3+kSwngI0aNUr79u3T+PHjbdofAACwL8IfAACyoQMHpCJFpMKFM+6e16+f1oYNH6pw4cpq0mQYGzxbkZubNGiQ9OeflhlAKdWqVSu98sorWrRokVauXGm7BgEAgF0R/gAAkM1ERkrHjmXsrJ+EhDitXTtQJpOLWreeKhcXt4y7eTbRvbtUoIA0cWLqrhs4cKBq1aqlESNG6MSJEzbpDQAA2BfhDwAA2czBg5alQRkZ/mzfPlGXLoXq6afHssGzjXh4SG+9ZTn568iRlF/n4uKiiRMnysPDQwMHDlRsbKztmgQAAHZB+AMAQDYTHCzlyycVL54x9/vnn406cOA7Va/+snx9m2TMTbOpN9+UcuaUJk1K3XUFCxbUuHHjdOzYMY0bN842zQEAALtxsXcDAAAg48TGSqGhUqNGUkZsuXPr1jlt2DBEhQr5q0GDgba/4SMkJEhhYam7Jjq6QIqviYlJfU/WlC+f1KOHNHu2NGqUVLRoyq8NCAhQjx49NHfuXNWpU0eBgYG2axQAAGQowh8AALKRw4ctAUhGLPlKTIzX2rXvyDDMeuaZyXJ2tv8+P1FR0q5dqbsmIiJeRVK4Uq1OndT3ZG0DB0ozZ0rTpkkTJqTu2v79+2vv3r0aNmyY/P39VaxYMds0CQAAMhTLvgAAyEaCgyVvb8nX1/b32rFjmiIiDqpZsxHy8Slh+xtCklS6tNSpkzRrlnTzZuqudXNz0+TJkyVJ77zzjuLj423QIQAAyGiEPwAAZBPx8VJIiFS1qmSy8W8AZ87s0t69X6tSpc7y82tp25shmffek27flr78MvXXFitWTCNGjNChQ4c0bdo06zcHAAAyHOEPAADZxNGj0p07lvDHlmJjb2nDhg+VJ08pNWr0vm1vhvuqXl166ilp6lQpLi711wcGBqpjx46aO3eu9u7da/0GAQBAhiL8AQAgmzh8WHJzk/z8bHufLVtGKTLykgIDx8vV1cO2N8MDvfeedP68tGhR2q5///33VaxYMQ0ePFhRUVHWbQ4AAGQowh8AALIBw7CEPxUqSK6utrvPsWPrdfToz6pdu48KF65suxvhkZ5+WqpcWZo4UTKbU3+9p6enxo0bp3PnznH8OwAAWRzhDwAA2cD589K1a5YwwFYiIy9p8+aPVaiQv2rV6m27GyFFnJwss3/++kv65Ze01ahevbp69uypZcuWacuWLdZtEAAAZBjCHwAAsoHDhy1f/f1tU98wDG3cOETx8bEKDBwvZ2cbTi9CinXuLBUvnvoj3+/Wt29f+fn5adiwYbp+/br1mgMAABmG8AcAgGzg8GGpRAnJx8c29Q8dWqLTp7crIOBd5c37uG1uglRzdZXeflvatk3avTttNdzc3DR+/HjdvHlTn3zyiQzDsG6TAADA5gh/AABwcJGR0okTUqVKtql/48ZZbds2QSVK1FXVqi/Y5iZIs169LKHfxIlpr+Hn56d+/fppw4YNWrVqlfWaAwAAGYLwBwAAB/fXX5YNn20R/hiGoU2bhslkMunpp0fLyYlfLTIbb2/pjTek5culf/5Je51XXnlF1atX15gxY3Tp0iXrNQgAAGyO39AAAHBwhw5ZAoCSJa1fOyTkB509u0sBAe/J27uI9W8Aq+jb17IEbPLktNdwdnbWqFGjdOfOHY0aNcp6zQEAAJsj/AEAwIElJkpHjlg2ejZZ+f/1b9++oG3bJqpYsVqqVKmjdYvDqgoXll56SfrmG+nKlbTXKV26tN566y1t3LhR69evt1p/AADAtlzs3QAAALCdkyel6GjrL/kyDEObN38iszlBzZuPZLlXBkpIkMLCUn9d587SV19JY8dK/fo9/LW5ckl58tz/ue7du+uXX37RyJEjVbt2bfnYahdxAABgNYQ/AAA4sMOHLTN+nnjCunWPHl2tU6d+U6NG78vHp4R1i+OhoqKkXbvSdq2/vzRnjvT445ZlYA/SosWDwx8XFxeNHj1aHTt21Lhx4zRu3Li0NQMAADIM/5kOAAAHdviwVLas5OFhvZrR0Ve1desYFSlSRVWrdrNeYdhcs2bS7dvSn3+mr0758uXVq1cv/fTTT9q+fbt1mgMAADZD+AMAgIO6ckU6f16qXNm6dbdsGaX4+Cg1bz5KJpOzdYvDpsqXl4oVkzZtspwAlx6vv/66fH199fHHHysqKso6DQIAAJsg/AEAwEEdPmz5as39fk6c2KJjx9apdu03lC9fGesVRoZwcpKaN7eEgkeOpK+Wm5ubRo4cqQsXLmhyeo4RAwAANkf4AwCAgwoJkQoWlAoVsk692NhobdkyUvnylVHNmj2tUxQZrmZNycfHMvsnvapVq6YXX3xRixcv1sGDB9NfEAAA2AThDwAADujOHenoUevO+lm27HPdvh2hp54aLmfnh+wWjEzNxUVq0kQKDZXOnk1/vf79+6tgwYL65JNPlJCQkP6CAADA6gh/AABwQEePWo4Et1b4c/nyUa1ZM1/+/h1UtGh16xSF3QQESO7u0ubN6a/l6empDz/8UEePHtV3332X/oIAAMDqCH8AAHBAhw9LOXJYTvpKL8Mwa/PmT+TllVsBAe+kvyDsztNTqlfPcurXjRvpr9e8eXM1atRIM2bMUERERPoLAgAAqyL8AQDAwRiGJfx54gnLEp/0OnRoqSIiDqpbt0HKkcMn/QWRKTz1lGQ2S1u2pL+Wk5OThg4dKrPZrNGjR6e/IAAAsCrCHwAAHEx4uGU2hzWWfEVFXdYff0xR8eJ1FBDwbPoLItMoUECqVk3ats2yR1R6FS1aVG+88YY2b96sX3/9Nf0FAQCA1RD+AADgYP494t3fP/21fvttvBISYtW06TA5OTmlvyAylWbNpOhoaccO69Tr3r27ypQpo1GjRik6Oto6RQEAQLoR/gAA4GAOHZJKlZJy5UpfnbCwHfr77zV68snXlDdvaav0hszF11cqXdpy7LvZnP56rq6uGj58uCIiIvT555+nvyAAALAKwh8AABzI7dvS6dPpX/KVmBinrVtHK3fuEnryyVet0hsyp+bNpStXpIMHrVOvevXq6tChg+bPn6/jx49bpygAAEgXwh8AABxISIhlw+fKldNXJzh4ga5dO6nGjQfLxcXdOs0hU6pWTcqfX9q40Xo1Bw4cKC8vL40ZM0aGYVivMAAASJNHhj9ms1nDhg1T586d1a1bN4WFhd3z/Ndff6127dqpffv22mjN3xoAAECqHT4s5c4tFS+e9hqRkRe1a9dMPf54Ez3+eGNrtYZMymSynPx14oR06pR1aubJk0f9+vXTrl27tH79eusUBQAAafbI8GfTpk2Ki4vTkiVL9M4772jcuHFJz926dUsLFizQ4sWLNXfuXI0ZM8amzQIAgAdLTJSOHLEs+UrP3szbtk2U2ZygRo0GW685ZGr16kkeHtKGDdar2blzZ1WoUEHjx49n82cAAOzskeHPvn37FBAQIEmqWrWqQkJCkp7z8PDQY489ppiYGMXExHAKCAAAdvTPP1JsbPr2+wkP/1N//71GNWv2ko9POqYPIUvJkUNq3FgKDpYuXLBOTWdnZw0ZMkQXLlzQl19+aZ2iAAAgTVwe9YLIyEh5eXklfe/s7KyEhAS5uFguLVKkiFq1aqXExET17t37kTc0m80KDQ1NR8vITmJjYxkvSDHGC1LKEcdKdHQB7dqVQyaTp3x8LioiIvX7rJjNidqw4RPlzFlIxYu3VkRExH/ukUsREbes1XIytq6f1nvEx8cn+yysWT+1bHUPf3+TNm4sqOXLY9SqVbSioy+nu6aHh4caNWqkr7/+WpUqVdJjjz1mhU4zN0f89wtsg7GC1GC8IL0eGf54eXkpKioq6Xuz2ZwU/Gzbtk2XLl3S5s2bJUk9e/ZU9erVVfkhu0yaTCZVqFAhvX0jmwgNDWW8IMUYL0gpRxwrYWGWU778/KRSpQqnqcb+/d/q5s1TCgqaruLFkx/tnjOnVKSIZzo7fTBb10/rPSIiIlSkSBGb1U8tW96jYUNp69acionJqRo18lul5ogRI/TMM89oyZIlmj17tsPPFHfEf7/ANhgrSA3GC1LiYQHhI5d9Va9eXdu2bZMkHThwQOXKlUt6Lnfu3MqRI4fc3Nzk7u4ub29v3bpl2//aBQAAkgsPl86fl/z903Z9VNQV7dw5QyVLNpCvbzPrNocs4+mnLftFWXOVVsGCBfXWW29p+/bt2rp1q/UKAwCAFHtk+NO8eXO5ubmpS5cuGjt2rAYPHqx58+Zp8+bNqlmzpipVqqROnTqpc+fOKlWqlOrXr58RfQMAgLts2WL5mtbw548/PlVCwh01bvyhw8/MwIPlySPVrSstWSKlcKVbinTt2lW+vr4aM2aM7ty5Y73CAAAgRR657MtkMmnEiBH3PObr65v0v/v166d+/fpZvzMAAJBiW7dKBQpIhQql/tqLF4/oyJEVqlGju/LmTb7cC9lLixbSjh3Sp59KEyZYp6arq6s+/PBD9ezZU99++61effVV6xQGAAAp8siZPwAAIHOLjZX++MMy6ye1k3YMw9DWrWPl4ZFHtWu/bpsGkaUULCgFBUlffCFdu2a9uvXq1VPTpk01a9YsXbp0yXqFAQDAIxH+AACQxf32myUASsuSr2PH1un8+X2qV6+/3N29rd8csqQ33pAiI6UZM6xb97333lN8fLymTZtm3cIAAOChCH8AAMji1qyRcuSQ7jqTIUUSEmK1fftEFShQXv7+7W3THLIkPz+pTRtp2jTp9m3r1S1VqpS6deumFStW6MiRI9YrDAAAHorwBwCALMwwLOFPvXqSm1vqrt23b55u345Qo0aDZTI526ZBZFkffihdvy7Nnm3dun369FGePHk0duxYGYZh3eIAAOC+CH8AAMjCjh+XTp6UmjRJ3XWRkRf1559zVKZMcxUvXss2zSFLq1VLatZMmjzZsqzQWry9vdW/f3/t27dP69ats15hAADwQIQ/AABkYWvXWr42bpy6637/fYoMI0EBAe9ZvSc4jo8+ki5ckObOtW7d9u3by8/PT5MmTVKsNZMlAABwX4Q/AABkYWvXSk88IRUvnvJrLlw4pNDQVapevbt8fFJxIbKdRo2kunUtR77Hx1uvrrOzswYPHqzz58/rm2++sV5hAABwX4Q/AABkUZGRlpO+nnkm5ddYjnYfp5w586tWrd62aw4OwcnJMvsnLExatMi6tWvXrq1mzZppzpw5HP0OAICNEf4AAJBFbd4sxcWlLvw5fnyDIiKCVa9eX7m5edquOTiMZ56RqlSRxo6VEhOtW/vfo99nWPtMeQAAcA/CHwAAsqi1ayVvb6lBg5S9PiEhTr//Pln58pVVxYoc7Y6UcXKynPz199/SihXWrV2iRAl16dJFy5cv1/Hjx61bHAAAJCH8AQAgCzIMS/jz9NOSq2vKrjl0aJFu3jyrhg0HcbQ7UqV9e8nPT/rkE+vP/nn99dfl6empyZMnW7cwAABIQvgDAEAWFBIihYenfMlXbOwN7do1SyVLNlCpUimcKgT8P2dnafRo6cgRaf5869bOkyePXnvtNf3222/avXu3dYsDAABJhD8AAGRJa9ZYvgYGpuz1u3Z9obi422rYkKPdkTbt2km1a0vDhknR0dat3a1bNxUpUkQTJkyQ2Wy2bnEAAED4AwBAVrR2rVStmvTYY49+7Y0bYTp48HtVrNhO+fOXs31zcEhOTpYj38+dk6y9P7O7u7sGDBigv/76S2v+TTYBAIDVEP4AAJDFXL8u7dghtWqVstdv3z5Zzs6uqlevn20bg8Nr2FBq3dpy8tfVq9at3bp1a1WoUEGffvqp7ty5Y93iAABkc4Q/AABkMRs3WjbdTcl+P+fO7dM//2xUzZo95elZwPbNweGNGyfdvi2NGWPduiaTSe+9954iIiK0cOFC6xYHACCbI/wBACCLWbtWyptXqlXr4a8zDEPbtk2Qp2dB1ajxSsY0B4dXsaLUvbv02WfS6dPWrV23bl0FBARo9uzZunHjhnWLAwCQjRH+AACQhZjN0i+/WDZ6dn7Eae3//LNRFy4cUr16feXq6pExDSJbGD5cMpmkoUOtX/vdd99VZGSkZs2aZf3iAABkU4Q/AABkIfv2SZcuPXrJl9mcoD/++FR58/rqiSeey5jmkG0UKyb17y8tXCgdOGDd2uXKlVPbtm21aNEinT171rrFAQDIpgh/AADIQtautZy69Kgj3kNCluv69dNq0OBtmUwuGdMcspUPPpDy5LF8tbZ+/frJxcVFn376qfWLAwCQDRH+AACQhaxdK9WpI+XL9+DXxMdHa9euz1SkSDU9/njTjGsO2YqPj/TRR9L69dLmzdatXbBgQXXv3l2//PKLDh06ZN3iAABkQ4Q/AABkEZcuSXv2PHrJV3DwAkVFXVZAwLtycnLKmOaQLb35plSypDRokGU/Kmvq2bOn8uXLp4kTJ8owDOsWBwAgmyH8AQAgi/jlF8kwHh7+xMRc1549X8nX9ykVLVo945pDtuTuLo0cKe3fLy1ZYt3anp6eevPNN7V3715t2bLFusUBAMhmCH8AAMgiVq+WHntMqlbtwa/ZvXuW4uOjVb/+gIxrDNla165SlSqWJWB37li3docOHVS6dGlNnjxZCQkJ1i0OAEA2QvgDAEAWEBcnbdggtWpl2fD5fm7eDNfBg9+rYsW2ypevTMY2iGzLZJLGj5dOnZK++MK6tV1dXfXOO+/o5MmTWrZsmXWLAwCQjRD+AACQBfz+u3TrltS69YNfs2PHdDk5mVSnzlsZ1xgg6emnpRYtpGHDpPPnrVu7adOmqlGjhj777DNFRUVZtzgAANkE4Q8AAFnA6tWW/VWeeur+z584EaqjR1erevWX5O1dOGObQ7bn5CR9/rkUHy/172/t2k4aNGiQrl69qnnz5lm3OAAA2YSLvRsAAACPtnq11KSJ5Ol5/+fnzftU7u65VLNmr4xtDPh/vr7S0KGWvX/WrLEsUXyQ69ctM9lSKnfuymrQoIXmzp2ngIAX5OOT95HX5Mol5cmT8nsAAODICH8AAMjkjh2Tjh9/8IyKXbt2ae/e7WrYcJBy5MiVsc0Bd3n3XWnhQssR8I0bPzisvHVLWr8+dbV9ffvpjz82avz42WrcePAjX9+iBeEPAAD/YtkXAACZ3Jo1lq/3m0lhNps1adIkFShQRFWqvJCxjQH/4eYmzZ4thYVJw4dbt3bevI+rYsW2OnToe926dc66xQEAcHCEPwAAZHKrV0sVK0qlSiV/bv369Tpy5IheeqmfXFzcM7w34L8aNJB69ZKmTJEOHrRu7Tp13pTkpJ07P7duYQAAHBzhDwAAmditW9K2bfc/5Ss+Pl5Tp05VuXLl1LRpUMY3BzzA+PFS3rxS795SYqL16np7F1HVql0VGvqTrl79x3qFAQBwcIQ/AABkYhs2SAkJ9w9/fvjhB505c0YDBw6Us7NzxjcHPEDevNKnn0q7d0tffmnd2k8++apcXXNqx45p1i0MAIADI/wBACATW73asmltnTr3Ph4VFaWZM2fqySefVMOGDe3THPAQL7wgNWsmffCBFBFhvboeHnlUs2YP/fPPJkVEWHldGQAADorwBwCATMpsltaulVq2lFz+cz7nN998o6tXr+qdd96Rk5OTfRoEHsLJSZo5U7pzRxowwLq1q1V7STlz5tPvv0+RYRjWLQ4AgAMi/AEAIJPas0e6fDn5kq/r169r7ty5at68uapUqWKf5oAUKFtWGjJEWrrUEmRai5ubp2rXfl3h4X/qzJkd1isMAICDIvwBACCTWr1aMpmkFi3ufXzOnDmKjY1V//797dMYkArvvSdVqCC9+aYUHW29upUqdVSuXEX/f/aP2XqFAQBwQIQ/AABkUqtXS/XrWzbP/deFCxe0cOFCtWnTRr6+vvZrDkghd3dp1izp9Glp6FDr1XV2dlPdun116dJfOnZsvfUKAwDggFwe/RIAAJBe169bjm1PqQsXpAMHLJvlhoX97/Fp076Q2WyoTZs373k8JsZ6vQLW1rCh1KeP5QSwoCCpdGnr1C1fvrX27v1aO3ZMU5kyzeTs7GqdwgAAOBjCHwAAMsCtW9L6VExO2LbN8tXd/X/X3bgRpnXrflSVKl108GBRHbzroKP/ngYGZDaTJkmbNkkvv2yZ1WYNJpOz6td/W6tWvaEjR1aocuVO1ikMAICDYdkXgP9j776jo6r2No5/J42QxEDoAQRpURSkSC9eULEQAemhF2mGFgiCFKkiIC10CFUIUkWkiICIoNRXmpSAClLEQJROQurM+8e5olxK2pSU57OWCzJn7z3PrHsuM/nNLiKSDh0/Drlzg6/vP4/t2zcTZ2c3qlTp7rhgIqnk6QlhYXD5Mowcab1xixevg69vBfbvn0V8vKbAiYiIPIqKPyIiIulMXBycPg1lyxrHZQP8+ecZTp/eTIUK7fD0zOvYgCKpVLWqcfrXunVw6JB1xjSZTNSq1Z+oqEiOHl1unUFFREQyGRV/RERE0pmffzYKQGXL/vPY3r3TyJbNi0qVOjsumIgVDB0K5crB8uVw65Z1xixcuBLFir3M//3ffGJirDSoiIhIJqLij4iISDrz00/g5gbPPmv8/McfRzh3bieVKr2Lu3sOx4YTSSNXV5gyxShwfvopWCzWGbdmzX7Ext7mxx8XWWdAERGRTETFHxERkXTEYjH2+yld2vgl2WKxsGdPCB4eualQoZ2j44lYRYkS0KwZnDz5z+bmaZU373M899zbHDmylLt3I60zqIiISCah4o+IiEg68scfcP36P0u+Ll7cx++/H6RKlR64uno4NpyIFf3nP/D887BmDVy9ap0xq1fvaV4OIAAAIABJREFUjdmcwIEDc6wzoIiISCah4o+IiEg6cvy48WeZMv/M+nnqKV/KltUR1pK5mEzGse9ubrBoESQmpn3MnDmLUKZMM06cWEtExKW0DygiIpJJqPgjIiKSjvz0ExQpAj4+cPbsN1y9epzq1Xvh4uLm6GgiVpczJ7RpA+fPw1dfWWfMqlXfw2RyZvnyWdYZUEREJBNQ8UdERCSduHsXzp0zlnyZzYns2TONXLmKU7p0Q0dHE7GZl16CatWM4s9vv6V9PC+vfJQv34YdOzbwyy+/pH1AERGRTMDF0QFERETEcPy4seHziy/C6dObuH79LP7+ITg56e1a7CshAS5csN349+49+HNAAPzyCyxcCMOGgbt72savXLkL4eGrmD59OjNmzEjbYCIiIpmAPk2KiIikE8eOGctgChWKY+nSmeTL9zylStVzdCzJgqKiYP9+241frdqDP2fPDp07w6RJsHIldOyYtvGzZ/ehadNOLFs2k+PHj1P27x3URUREsigt+xIREUkH4uPh1Clj1s+pU2u5fft3atYMwmTSW7VkDSVLgr8/7NsHBw+mfbzGjTvi4+NDSEhI2gcTERHJ4PSJUkREJB04fRpiY6FMmXvs3z+HQoVeomjRWo6OJWJX9etDiRKwfDn89VfaxvLw8KRbt27s3buXAwcOWCegiIhIBqXij4iISDpw9Kixz0lMzHKio/+iZs1+mEwmR8cSsStnZ3j3XeMY+IUL0378e0BAAPnz5yckJASLxWKdkCIiIhmQij8iIiIOZjYbR7w///wdDh1aQLFiL1Oo0EuOjiXiELlzG8e/nzsHmzenbSx3d3cCAwM5evQo3333nVXyiYiIZEQq/oiIiDjY+fNw+zbkyrWI2Nhb1KjR19GRRByqcmWoUcM4/v3nn9M2VuPGjSlSpAjTpk3DbDZbJ6CIiEgGo+KPiIiIgx07Bq6u17hyZSl+fm+SL9/zjo4k4nAtW0LevLBokXH6WGq5urrSu3dvzpw5w5YtW6wXUEREJANR8UdERMTBjh2D4sVDSUyMpXr1Po6OI5IuuLsb+//cvg1hYZCWLXvq16+Pn58f06dPJz4+3nohRUREMggVf0RERBzo6lX4888/cHJawQsvvEOuXMUcHUkk3XjmGWjUCA4fhj17Uj+Ok5MTQUFBXLx4kfXr11stn4iISEah4o+IiIgDHTsGefLMwWSCqlUDHR1HJN2pVw9Kl4ZVq+DKldSPU6dOHcqVK8fs2bOJjY21XkAREZEMQMUfERERBzp27Ddy5PiCcuUC8PYu6Og4IumOkxN06gRubrBgAaR21ZbJZKJfv35cuXKFFStWWDekiIhIOqfij4iIiIPcuQPR0TNwcspGlSrdHR1HJN3KkQPat4dLlyAtq7aqVq1K9erVCQ0NJSotu0iLiIhkMEkWf8xmM8OHD6dly5a0a9eOCxcuPHB9165dtGjRghYtWjBy5EgsadmNT0REJAvZty8cb+8tPPtsezw8cjs6jki6Vq4c1KkD33wDJ0+mfpygoCBu3LjBp59+arVsIiIi6V2SxZ9vvvmGuLg4Vq1aRXBwMOPHj79/7e7du0ycOJG5c+eyevVqChUqxI0bN2waWEREJLMID5+G2ZyDOnU6OTqKSIbQtCkULAhLlhingKXGiy++yKuvvsrixYv1uVVERLKMJIs/hw4donbt2gCUL1+eEydO3L925MgR/Pz8mDBhAq1btyZPnjzkypXLdmlFREQyiQsXDmM278Lb+12yZ/d2dByRDMHNDbp0geho+PTT1B//3qdPH6Kioli4cKF1A4qIiKRTSRZ/7t69i5eX1/2fnZ2dSUhIAODGjRscOHCAAQMGMH/+fD799FN+++0326UVERHJBCwWCzt2TCEhIQ/VqrV1dByRDKVQIWjWDE6cgJ07UzeGn58fb7/9NsuXLycyMtK6AUVERNIhl6QaeHl5PbAhntlsxsXF6JYzZ07Kli1L3rx5AahUqRLh4eEUK1bsseOZzWbCw8PTmluyiJiYGN0vkmy6XyS5HHGvREfnJSLCOKYoIuL/uHXrEDdvDiNnzptERNy0wvjeRESkch1MOnmO9Poa4uPjiYiIsNn4KZUZniOt4z/7LPj5+bB2bTZ8fP6iQIGEh9r89Zcr0dF/PnaMt956i6+++opx48bRrVu3VGf5X3ovkuTSvSIpoftF0irJ4k/FihXZuXMn9evX5+jRo/j5+d2/VqZMGX7++WeuX7+Ot7c3x44do0WLFk8cz8nJidKlS6c9uWQJ4eHhul8k2XS/SHI54l65cAF8fY1ZP99++ykJCYV45pnmPP20m1XG9/AAX19Pq4zlqOdIr68hIiICX19fm42fUpnhOawxfvfuMHo0fPllXoYMMZaE/VuePFC0aJ7H9i9dujTNmjXj888/p3///jz99NNpyvM3vRdJculekZTQ/SLJ8aQCYZLLvurVq4ebmxsBAQGMGzeOwYMHs3jxYnbs2EGuXLkIDg6mS5cutGjRgnr16j1QHBIREZEH/fLLNiIjTxEZ2Yvy5a1T+BHJiry8oFMnuHIF1qxJ3RiBgYE4Ozsza9Ys64YTERFJZ5Kc+ePk5MTo0aMfeKxEiRL3/+7v74+/v7/1k4mIiGQyZnMC+/ZNx9W1BFFRDShTxtGJRDK20qWhXj3Ytg2efx4qVEhZ/3z58tGmTRsWL17Mu+++S6lSpWwTVERExMGSnPkjIiIi1hEevpHr189x40Zf/PycyZ7d0YlEMr5GjaBoUVi2DFJzcnuXLl3w8PBgxowZ1g8nIiKSTqj4IyIiYgdxcXHs2zeDXLnK8Pvvr1GunKMTiWQOLi7w7ruQkJC64999fHzo1KkT27dv5/jx47YJKSIi4mAq/oiIiNjBli2ruXMnAi+vIMCk4o+IFeXPbxz/Hh4Ou3alvH/Hjh3x8fEhJCTE+uFERETSARV/REREbCw6OpoVK+ZSuHAVzp6tQZEikCuXo1OJZC61a8MLL8Dnn0NkZMr6enp60q1bN/bu3cuBAwdsE1BERMSBVPwRERGxsbCwMG7evEb58kGcO6dZPyK2YDJBu3bGMrAlSyAxMWX9AwICyJ8/PyEhIVhSunZMREQknVPxR0RExIZu3brFwoULqVq1Ln/8UQGLBSpWdHQqkczJxwdatYKzZyE0NGV93d3dCQwM5OjRo3z33Xc2ySciIuIoKv6IiIjY0KJFi7hz5w4dOvTl8GEoUAB8fR2dSiTzqlzZKLBOnQop3b+5cePGFClShGnTpmE2m20TUERExAFU/BEREbGRP//8k2XLluHv70+OHM9y5ozxS6nJ5OhkIpmXyQRt2oC3t7EMLC4u+X1dXV3p3bs3Z86cYcuWLbYLKSIiYmcq/oiIiNjIvHnziIuLo1evXmzbhpZ8idiJlxeMHw/HjsGoUSnrW79+ffz8/Jg+fTrx8fG2CSgiImJnKv6IiIjYwOXLl1m9ejVNmzalaNGifPUV5MsHhQs7OplI1vDaa9Cpk1EE2r8/+f2cnJwICgri4sWLrF+/3nYBRURE7EjFHxERERuYNWsWJpOJ9957j2vXYO9eLfkSsbeQEKPg2qEDREcnv1+dOnUoV64cs2fPJjY21nYBRURE7ETFHxERESs7e/YsX375JW3atKFAgQJs2GAcO60lXyL25e0NixfDzz/DBx8kv5/JZKJfv35cuXKFlStX2i6giIiInaj4IyIiYmXTp0/H3d2drl27ArB2rTH7oEgRBwcTyYJeeQV694YZM+Dbb5Pfr2rVqlSvXp3Q0FCioqJsF1BERMQOVPwRERGxohMnTrBt2zY6deqEj48PN2/C9u1Qv76WfIk4yvjxUKoUdOkCKanjBAUFcf36dZYuXWq7cCIiInag4o+IiIgVTZs2jZw5c9KxY0cANm6E+Hij+CMijuHhAQsXwm+/wdChye/34osv8uqrr7Jo0SJu3Lhhu4AiIiI2puKPiIiIlRw8eJAffviBbt264eXlBRhLvp5+GsqVc3A4kSyudm3o1QumT4c9e5Lfr0+fPkRFRbFw4ULbhRMREbExFX9ERESswGKxEBISQr58+WjVqhUAt2/D1q3QrJmWfImkB+PGGXtvde4M9+4lr4+fnx9vv/02y5cvJzIy0rYBRUREbETFHxERESvYtWsXR44cITAwEHd3dwA2b4bYWKP4IyKO5+UF8+cbp3+NGpX8fr169SIhIYG5c+faLpyIiIgNqfgjIiKSRmazmWnTplGkSBGaNGly//G1a6FgQahWzYHhROQB9erBu+/CpEnw44/J61OkSBGaNm3KmjVruHTpkm0DioiI2ICKPyIiImm0ZcsWTp8+Te/evXF1dQXg7l346ito2hSc9G4rkq5MmgT58xvLv+LiktcnMDAQZ2dnZs2aZdtwIiIiNqCPoyIiImkQHx/P9OnT8fPzo/6/jvTasgViYrTkSyQ9ypkT5syB48eNfYCSI1++fLRp04YNGzbwyy+/2DagiIiIlan4IyIikgbr16/n4sWL9O3bF6d/TfFZs8aYWVCzpgPDichjNWwIrVvD2LFGESg5unTpgoeHBzNmzLBtOBEREStT8UdERCSVYmNjmT17NuXKlaNu3br3H4+ONjZ7btIEnJ0dGFBEnmjaNGMWUOfOkJCQdHsfHx86derE9u3bOZ7cipGIiEg6oOKPiIhIKq1YsYIrV64QFBSE6V9nuX/9tVEA0pIvkfQtTx6YOdPY+HnKlOT16dixIz4+PoSEhNg2nIiIiBWp+CMiIpIKt2/fZu7cudSqVYtq/3Oc19q1xi+VL7/soHAikmzNm0PjxjB8OJw5k3R7T09PunXrxt69e9m/f7/tA4qIiFiBij8iIiKpsHDhQm7dukX//v0feDwmBjZuNH6ZdHFxUDgRSTaTCWbPhuzZoVs3MJuT7tOqVSt8fX2ZNGkS5uR0EBERcTAVf0RERFIoMjKSpUuX0qBBA0qXLv3AtW3bjGPeteRLJOMoUMA4/n33bliwIOn22bJlo0+fPpw8eZKtW7faPqCIiEgaqfgjIiKSQrNmzSIxMZE+ffo8dG3tWvDxgX/t/ywiGUDnzsb/bwcOhD/+SLp9gwYN8PPzIyQkhPj4eNsHFBERSQMVf0RERFLg3LlzfP755wQEBFC4cOEHrsXGwoYN8M474OrqoIAikiomE8ybZyzd7N076fbOzs7079+fixcvsmbNGtsHFBERSQMVf0RERFIgJCQEd3d3evTo8dC1r76CW7egRQsHBBORNCtVCkaOhHXrYP36pNu//PLLVK5cmdmzZxMVFWXzfCIiIqml4o+IiEgyHT16lO3bt9O5c2dy5cr10PWwMMifH157zQHhRMQqgoOhXDno2dMo5j6JyWQiODiYa9eusWTJErvkExERSQ0Vf0RERJLBYrEwadIk8uTJQ4cOHR66fuMGbNoErVrplC+RjMzVFebPhytX4IMPkm5frlw5Xn/9dRYtWsS1a9dsH1BERCQVVPwRERFJhl27dnHo0CECAwPx9PR86PratRAXB23bOiCciFhV5crQty/MnQs//JB0+6CgIGJjY5k7d67tw4mIiKSCij8iIiJJSExMZMqUKRQpUoRmjznDPSwMnnsOKla0czgRsYnRo6FoUeja1djM/UmKFStGs2bNWLVqFVeuXLFPQBERkRRQ8UdERCQJGzdu5JdffqFfv364PuIYr4sXYfduY9aPyeSAgCJidV5exsyf06fh44+Tbh8YGIiLiwufffaZ7cOJiIikkIo/IiIiTxAbG8v06dMpW7Ysb7zxxiPb/P27XuvWdgwmIjb35pvQpg2MGwcnTz65bb58+Wjfvj0//PADJ5NqLCIiYmcq/oiIiDzBZ599RkREBMHBwZgeMa3HYoFly6BmTShWzAEBRcSmpk4Fb29j+ZfZ/OS2Xbp04amnnmLy5Mn2CSciIpJMKv6IiIg8xu3bt5k3bx61a9ematWqj2xz7BicOqWNnkUyq7x5jQLQvn0wZ86T23p5edG8eXP27dvHnj177BNQREQkGVT8EREReYwFCxZw+/Zt+vfv/9g2YWHG0dDNm9sxmIjYVdu2UK+ecfT7pUtPbvvGG29QqFAhJk+ejDmpqUIiIiJ2ouKPiIjII1y9epWlS5fy9ttv89xzzz2yTWKisd9P/fqQO7edA4qI3ZhMMG+esewrMNBY7vk4rq6u9O3bl/DwcLZs2WK/kCIiIk+g4o+IiMgjzJw5E7PZTN++fR/b5rvvICJCS75EsoJixYzj3zdtgjVrntzW39+f5557jpCQEOLi4uwTUERE5AlU/BEREfkfZ8+eZd26dbRq1YpChQo9tl1YmLER7Ntv2zGciDhM377w0kvQuzdcv/74dk5OTgQHB/P777+zevVq+wUUERF5DBdHBxAREUlvpkyZQvbs2enRo8dj20RHw+efQ4sW4O5ux3AikiwJCXDhgvXHHTUKGjWCPn2MAvDj1KxZk2rVqjF79mzeeecdvLy8rB9GREQkmVT8ERER+ZcDBw7w7bff0r9/f3x8fB7bbuNGuHMH2rSxYzgRSbaoKNi/3zZjv/oqLF8OnTvDK688uo3JZCI4OJjmzZuzYMECgoKCbBNGREQkGbTsS0RE5L/MZjMTJkzA19eX9u3bP7FtWBgULgz/+Y+dwolIutGgARQtCt26wb17j29XpkwZGjRowOLFi7l8+bL9AoqIiPwPFX9ERET+a8OGDYSHhxMcHEy2bNke2+7PP+Hrr6F1a3DSO6lIluPmBh9/DGfPGptAP0lQUBAmk4mQkBD7hBMREXkEfWQVEREBoqOjCQkJ4cUXX6R+/fpPbLt6tbGfiE75Esm6ataETp1g4kQ4duzx7QoWLEjHjh3ZtGkTP/30k/0CioiI/IuKPyIiIsDixYu5evUqgwYNwmQyPbHt8uXw4otQtqydwolIujRpEuTODV26QGLi49t17dqV3LlzM2HCBCwWi/0CioiI/JeKPyIikuVFRkayaNEiXn/9dSpWrPjEtmfPwr59mvUjIpArF0ybBj/+CNOnP76dp6cnffr04fDhw2zfvt1+AUVERP5LxR8REcnypk+fTnx8PMHBwUm2Xb4cTCZo1coOwUQk3WvZEvz9Ydgw+O23x7dr0qQJpUqVYtKkScTFxdkvoIiICDrqXUREsrjTp0+zbt06OnToQJEiRZ7Y1mIxTvmqW9c46UtEsq6EBLhwwfj7kCHw3XfQsSNMnpz3/uMPcqFDh4EMG9aVmTM/o2nTjkk+h7c3+PhYL7OIiGRdKv6IiEiWZbFY+OSTT/D29qZHjx5Jtt+9G375BYYOtUM4EUnXoqJg//5/fn77bVi1Cj7+2IU333xcr1o880xtli6djbNzI7Jnf3Jl5403VPwRERHr0LIvERHJsnbv3s2+ffsIDAwkR44cSbafM8f4RaxFCzuEE5EMpU4dKFYMtm59irt3H9+udu33iYuLYv/+2XbLJiIiouKPiIhkSQkJCUycOJGiRYsSEBCQZPurV2HdOmNZR/bsts8nIhmLkxO0awcxMU6sWfP4dnnylKJMmeb89NNKrl9/wiZBIiIiVqTij4iIZElr1qzh7NmzDBgwADc3tyTbL1oE8fHQvbsdwolIhlSoENSqdZf9++Hkyce3q169F87Obnz//ST7hRMRkSxNxR8REclyoqOjmTlzJpUqVeLVV19Nsn1iIsybB6+8As8+a4eAIpJh1a59l/z5jZMBY2Mf3cbTMw9VqnTn3LlvuXTpgH0DiohIlqTij4iIZDnr1q3j+vXrDBo0CJPJlGT7rVuNU33ee88O4UQkQ3N1hbZt4do12LDh8e0qVmzPU0/5snv3BCwWs/0CiohIlqTij4iIZCmXL19m48aNNGzYkDJlyiSrz5w5UKAANGpk43Aikin4+UHt2rBjB5w//+g2Li7u1KrVn8jIcE6dekKVSERExApU/BERkSxl6tSpmEwmgoKCktX+wgXYvBm6dDG+0RcRSY4mTcDbG5YtM5aOPsqzz9anQIEX2bNnKvHx0fYNKCIiWYqKPyIikmX89NNPbN68mYYNG+Lr65usPvPng8kEXbvaOJyIZCoeHhAQAL//Dtu3P7qNyeTEyy8PIioqkh9/XGzfgCIikqWo+CMiIlmCxWJh/Pjx5MmTh8aNGyerT3w8LFgA/v5QpIiNA4pIplOxIpQvD5s2QWTko9sUKlSRUqXe4McfF3L37mMaiYiIpJGKPyIikiVs3ryZI0eO0LdvX7Jnz56sPuvXw9Wr0KOHjcOJSKYVEADOzhAWBhbLo9vUqtUfszmBH36YYt9wIiKSZaj4IyIimV50dDSTJk3ihRdeoEmTJsnuN3cuPPMMvPGG7bKJSObm42Ps/3PmDPzww6Pb5MxZhIoVOxAe/iUREcfsG1BERLKEJIs/ZrOZ4cOH07JlS9q1a8eFCxce2aZLly6sWLHCJiFFRETSIjQ0lKtXrzJ06FCcnJL3vceZM/Dtt9Ctm/GtvYhIatWubZwAtnatcQT8o1St2gNPz7zs3DlWR7+LiIjVJfkJ+JtvviEuLo5Vq1YRHBzM+PHjH2oTEhLCrVu3bBJQREQkLS5dusTixYt5++23qVChQrL7zZtnnO7VubMNw4lIluDkBB06GMu+li599PIvNzdPatXqz9Wrxzl16kv7hxQRkUwtyeLPoUOHqF27NgDly5fnxIkTD1z/+uuvMZlMvPzyy7ZJKCIikgYTJ07E2dmZ4ODgZPe5dw+WLDGWauTPb7tsIpJ15MkDzZrB6dOwe/ej25Qu3ZACBV7khx+mEBt7174BRUQkU3NJqsHdu3fx8vK6/7OzszMJCQm4uLjw888/s2nTJqZPn86sWbOS9YRms5nw8PDUJ5YsJSYmRveLJJvuF/lfx48fZ/v27bRu3ZobN25w48YNIOl75YsvcnDjRkHq179AeHi0VbJER+clIiLeKmM9enxvIiJu22x8ezxHen0N8fHxRERE2Gz8lMoMz5GZX8OT7peSJaF48VysWeNKnjx/kStX4kNtypbtzvbtPfn220nUqNGL6Og/rZ5d0gd9bpGU0P0iaZVk8cfLy4uoqKj7P5vNZlxcjG7r16/n6tWrdOjQgcuXL+Pq6kqhQoWeOAvIycmJ0qVLWyG6ZAXh4eG6XyTZdL/IvyUkJDBo0CAKFy7MwIEDyZYt2/1rSd0rnTpB6dLQrl1RTCbr5LlwAXx9rTPWo3h4gK+vp+2ewA7PkV5fQ0REBL7J/B8vvb6G9PYcmfk1JHW/dO0Ko0bB11/no18/Y0nYv/n6+nL5cmNOn15HTEwHXnpJ72uZlT63SErofpHkeFKBMMllXxUrVmT3f+emHj16FD8/v/vXBg4cyJo1a1i2bBmNGzemY8eOWv4lIiLpwqpVq/jll18eKvwk5cgROHDAON7dWoUfEZG/5coFLVrAzz/Dd989uk2tWv1wcXEjNHSCXbOJiEjmlWTxp169eri5uREQEMC4ceMYPHgwixcvZseOHfbIJyIikmLXr19nxowZVKtWjddeey1FfefOhezZoX17G4UTkSyvRg0oUwbWrYPIyIeve3rmpWrV9zh4cBe7du2yf0AREcl0klz25eTkxOjRox94rESJEg+16927t/VSiYiIpMGUKVOIiopi6NChmFIwfeevvyAsDFq1gpw5bRhQRLI0kwnatoXRo43N5QcMeHj5V4UK7Th3bi0ff/wx1atXx83NzSFZRUQkc0hy5o+IiEhGcuzYMT7//HPatWtHyZIlU9R36lTjpK8BA2wUTkTkv3x8oGVLOHsWHjWh3tnZjffeG8rFixdZtGiR/QOKiEimouKPiIhkGomJiYwZM4a8efPSs2fPFPW9cQNmzIDmzY3NnkVEbK1qVShXDr78Eq5cefh6pUq1qFevHvPmzePy5cv2DygiIpmGij8iIpJprF27lpMnTzJw4EA8PVN2ys+0aXDnDgwbZqNwIiL/w2SCNm3Azc1Y/pX48MnvfPDBBwCMHz/evuFERCRTUfFHREQyhRs3bjB16lQqV66Mv79/ivreumUUfxo3hrJlbRRQROQRcuSAgAD47Tf4+uuHrxcsWJAePXrwzTff8P3339s/oIiIZAoq/oiISKYwdepU7t69y7Bhw1K0yTPAzJlw86Zm/YiIY1SpYvy3aZOxB9D/6tSpE0WLFuWjjz4iLi7O/gFFRCTDU/FHREQyvOPHj7N27VratGmDn59fivreuQNTpoC/P1SsaKOAIiJJaN0acuWChQshOvrBa25ubgwbNoyLFy+yePFixwQUEZEMTcUfERHJ0P7e5Dl37tz06tUrxf3nzIHr1+HDD20QTkQkmbJnhy5djM3nly8Hi+XB67VqGZs/z507V5s/i4hIiqn4IyIiGdrq1as5fvw477//Pk899VSK+kZHw6RJ8Prrxqk7IiKOVKwYNGgAP/4Ie/c+fP3vzZ/HjRtn52QiIpLRqfgjIiIZ1p9//snUqVOpVq0aDRo0SHH/efPgzz8160dE0o833wQ/P1i1Cs6de/BawYIFCQwMZMeOHezcudMxAUVEJENS8UdERDKsTz75hJiYGIYPH57iTZ5jYmDiRKhbF2rVslFAEZEUcnKCzp3BxQX69IHY2Aevd+zYkZIlSzJmzBii/3dzIBERkcdQ8UdERDKkPXv2sGnTJrp27UqxYsVS3H/hQoiI0KwfEUl/fHygfXs4cQKGDn3wmqurKyNHjiQiIoJZs2Y5JqCIiGQ4Kv6IiEiGExsby+jRoylSpAjdunVLcf+4OBPjx0PNmlCnjvXziYikVfny0LYtTJ4MW7c+eO2ll16iadOmfPrpp5w5c8YxAUVEJENR8UdERDKc+fPnc/HiRYYPH062bNlS3H/9+hz8/jsMHw4pXC0mImI3w4bBCy9Ahw4QGfngteDgYLy9vRkxYgRms9kxAUVEJMNwcXQAERGRlPjtt98IDQ3F39+fmjVrprh/fDwcdBizAAAgAElEQVTMn5+bKlWgXj3jsRs34PZtKwf9H/fu2XZ8Ecl83N1hxQqoXBk6doTNm/8pWPv4+DBw4EAGDx7M2rVradGihUOziohI+qbij4iIZBgWi4XRo0fj7u7OoEGDUjVGWBhcvuzG3Ln//BJ1+/bDyyqsrVo1244vIplT2bLG0q9evWDCBPjvae8ANGrUiC+++ILJkyfzyiuvkCdPHscFFRGRdE3LvkREJMP48ssv2b9/P0FBQeTNmzfF/WNi4KOPoHTpGPz9bRBQRMQGAgOhZUtj8+dt2/553GQyMWLECO7du8eECRMcF1BERNI9FX9ERCRDuHbtGuPHj6dChQoEBASkaoxx4+DcOQgOjtRePyKSYZhMxgmFzz8PrVrB+fP/XCtevDhdu3Zl06ZN7N6922EZRUQkfVPxR0REMoRx48YRHR3N6NGjcXJK+dvXmTMwfjy0bg01akTZIKGIiO14esK6dZCYCE2aPLiPWPfu3SlRogQjR44kKkr/vomIyMNU/BERkXRv165dbN68me7du1OyZMkU97dYoEcP8PCAKVNsEFBExA5KlTL2LTtyxPg3zWIxHndzc2PMmDFcuXKFadOmOTakiIikSyr+iIhIuhYVFcWoUaMoUaIEXbt2TdUYy5bBd98ZM3/y57duPhERe3r7bRg5EpYuhTlz/nm8QoUKtGrVirCwMI4ePeqwfCIikj6p+CMiIunatGnTuHLlCmPGjMHNzS3F/a9dg+BgqF4dUlk7EhFJVz780CgC9e0Le/f+83i/fv3Inz8/H374IXFxcY4LKCIi6Y6KPyIikm4dPXqUsLAwWrduTYUKFVI1xsCBcPMmzJsHqdgqSEQk3XFyMmY0Fi0KzZpBRITxuJeXF8OHD+fXX39lwYIFjg0pIiLpij4Gi4hIuhQXF8eHH35I/vz56devX6rG+P57WLQI+veHsmWtHFBExIFy5oQvvoBbt6B5c/h7ok/dunWpX78+c+fO5ezZs44NKSIi6YaKPyIiki7NnTuXX3/9lREjRuDp6Zni/nFx0L278c348OE2CCgi4mBlyxpHwO/ZAwMG/PP4kCFD8PDwYNiwYSQmJjouoIiIpBsq/oiISLpz8uRJQkNDadSoEXXq1EnVGBMnQng4zJ5tHJEsIpIZBQQYsxtnzIDQUOOx3LlzM2TIEI4ePcqyZcscG1BERNIFFX9ERCRdiYuLY+jQoeTKlYvBgwenaoyzZ+Gjj4y9MOrXt3JAEZF0ZsIEePNNCAyEbduMxxo0aEDdunUJCQnht99+c2xAERFxOBV/REQkXZk3bx5nzpxh1KhR5MiRI8X9LRbjFyBXV5g2zQYBRUTSGRcXWLUKXnjBKHofPw4mk4mRI0fi7u7O0KFDtfxLRCSLU/FHRETSjVOnThEaGkrDhg2pW7duqsZYudL45nvsWChY0MoBRUTSKW9v2LwZnnoK/P3hjz8gX758DBkyhCNHjmj5l4hIFqfij4iIpAt/L/fKmTNnqpd7nT8PffpApUrG7B8RkaykcGHYtAmuX4cGDSAqylj+9corr2j5l4hIFufi6AAiIiIA8+fP5/Tp08yaNYucOXOmuP/du9CoEcTHQ1gYODvbIKSISDpXoYKxBKxhQ2jVCr74wsSIESNo2LAhQ4YMISwsDOf//gN54wbcvm3bPN7e4ONj2+cQEZGkqfgjIiIOd+rUKebOnXv/G+qUMpuhfXs4cQK2bIFnn7VBSBGRDMLfH6ZPh169jJPApk0zln8NGjSIZcuW0bFjR8Ao/Gzdatssb7yh4o+ISHqg4o+IiDhUbGwsAwcOxMfHhyFDhqRqjJEj4YsvYOpUeP116+YTEcmIevY0Tj6cOhVKlIDevRuwbds2pk6dSq1atShZsqSjI4qIiB1pzx8REXGokJAQzp49y9ixY1O13Gv1ahgzBjp3hr59bRBQRCSDmjjRWA7brx9s2mSc/uXp6cmgQYOIi4tzdDwREbEjFX9ERMRhDhw4wJIlS2jVqhW1a9dOcf/Dh6FjR6hRA2bPBpPJ+hlFRDIqZ2dYvhwqVoSAADh7Ng+jR4/m1KlTzJ4929HxRETEjlT8ERERh7hz5w6DBw+maNGiDBgwIMX9r1wxvtHOkwfWrYNs2WwQUkQkg/P0hI0boUABqF8fChZ8jSZNmjB//nxOnjzs6HgiImInKv6IiIhDfPTRR0RGRjJhwgQ8PDxS1Dc2Fpo0MY4z3rAB8ue3UUgRkUygQAHYvh3c3Ix90dq2HULBggWZNOkD4uKiHB1PRETsQMUfERGxu61bt7Jhwwa6d+9OuXLlUtTXYoEePWDfPvj0Uyhf3kYhRUQykeLFjZO97t6Fd97xZPDgCVy9epldu8Y7OpqIiNiBTvsSEZE0uXHDOC44ua5di+TDD0dQqlQZ6tfvwYULSffx9v7nqODJk2HJEhgxApo1S1VkEZEs6cUXYdMmqFcPBg6sSKNGXfjii1CKF69LiRKvODqeiIjYkIo/IiKSJrdvG98mJ4fFYmbdug+4dy+WGjUmsGOHa7L6vfGGUfz55BMYNAiaN4fhw9MQWkQki6pVC9auNfZMc3PrSd6837N9+4cUKFAWT8+8jo4nIiI2omVfIiJiNz/+uIiLF/dRp85gcuUqnux+Fgt88IFR+AkIgLAwcNI7mIhIqvj7w+LFsG+fG7dvTyQ+Ppqvv/4Ai8Xs6GgiImIj+ugsIiJ2ceXKcfbunUbJkq9TpkzzZPczm2HIEJgwwdjrJyzM2LRURERSr107+PBDOHasBO7ug7l4cS+HDi12dCwREbERFX9ERMTm4uKi+OqrAXh65qVevdGYTKZk9UtIgAULYMUKowA0ezY4O9s4rIhIFvHuu/DWW/Djj83x8HiDPXtCuHLluKNjiYiIDaj4IyIiNvftt6O5fft33nprIu7uOZLVJy7OKPYcOmQUfsaOhWTWjEREJJkaNYKXXzZx9OgonJzy8tVXA4iNvevoWCIiYmXa8FlERGwqPHwD4eEbqFatF4UKvZSsPtHRMHMmnDtnLE3o3JlknQqWXNHReR8Y7949640tIpKRmEzQqhXExOTg+PFJFC3ajm+/Hc2bb05I9ixNERFJ/1T8ERERm7l58yI7doyiUKGXqFq1e7L63L4N06ZBRAR07QovvQRRUbB/v/VyRUTE4+v7z8/VqllvbBGRjMbJCTp2hNDQily61BOYQdGiNXj++XccHU1ERKxEy75ERMQmEhJi2bw5CCcnV9588xOcnJL+vuHyZWNj58hI6NXLKPyIiIjtOTtDly6QP393oqMrsX37GK5f/83RsURExEpU/BEREZv47rtxREaG8+ab4/D2Lphk+0OHYPx4iI+H/v3h+eftEFJERO5zdYX33nPG3X0icXHZWLu2L/HxWhcrIpIZqPgjIiJWFx6+kePHV1GpUheKF6/7xLZmM6xfD6GhULgwDB0KxYrZKaiIiDzAzQ169iyA2TyRu3d/Zd260VgsFkfHEhGRNFLxR0RErOratbPs2DGSQoVeombNvk9sGx0Ns2bBli1Qq5Yx4ydH8g4DExERG3F3h969axIfH8gff6xnx47PHR1JRETSSMUfERGxmvj4aDZt6ouLizv160954j4/f/wB48bBqVPQpo1xqperqx3DiojIY3l4QI8e7xEfX4Njx8Zw5Ei4oyOJiEgaqPgjIiJWYbFY2LFjFNevn+Ottybi5ZXvsW2PHjX294mJgeBgePllOwYVEZFkyZHDmfbtJ2Kx+LB9exC//nrH0ZFERCSVVPwRERGrOH58DeHhG6hevSdFi9Z4ZBuzGTZuhDlzwNcXhgyBkiXtHFRERJKtQIFc+PtPwcXlMqtWDeXCBe3/IyKSEan4IyIiafbHH0fYufMjihatRZUqPR7Z5t49mDsXNm2C6tVhwADw8bFzUBERSbHSpStSqdIAPDy2s2jRQi5dcnQiERFJKRV/REQkTa5di2TTpr489VQB6tefiJOT80Ntrl41lnkdPw4tW0KHDtrfR0QkI6lduwNFi75JjhxTmT17D5cvOzqRiIikhIo/IiKSanFxcYwdG0Rs7F0aNpyJu3vOh9ocPw4ffwx370JQELzyCphMDggrIiKpZjKZaNBgLD4+pciTJ5jp0y/yxx+OTiUiIsml4o+IiKTaxx9/zKlTR3j99bHkyeP3wDWLBb76yjjKPW9eY3+fZ591UFAREUkzV1cPGjeegbs75M7di6lTo1QAEhHJIFT8ERGRVFmzZg2rVq2iefN3efbZtx64FhMDoaHw5ZdQuTIMHAi5czsoqIiIWE3OnE/z9tuTcXM7i4/PUKZOtXDliqNTiYhIUlT8ERGRFDt27BhjxoyhZs2adOzY74Frf/4JEybAkSPQrBl07gxubg4KKiIiVle0aE1q1Qome/ateHnNZ8oUY283ERFJv1T8ERGRFImIiKBXr17kz5+fiRMn4uz8zwbPFy8ahZ9bt6BvX6hXT/v7iIhkRi+91Ilnn/XH2zsEN7edTJmCZgCJiKRjLo4OICIiGUdUVBSBgYHExMSwaNEifHx8uH3buHbmDMyeDR4exsbO+fM7NquISEaXkAAXLthu/Hv3Ut/XZDJRr94Ybtz4DReXAfzxx2dMmvQsQUFQuLD1MoqIiHWo+CMiIsmSmJjIwIED+fnnn5k7dy6lSpW6f+3oUZg/39jYuW9f8PFxYFARkUwiKgr277fd+NWqpa2/q2t2GjWazWefteCZZ97j/PlVTJ6cl7594ZlnrBJRRESsRMu+REQkWaZMmcK3337LkCFDqF279v3H16yBefPg6adhwAAVfkREshIvr/w0ajSbuLiblC7di+zZY5g6FX791dHJRETk31T8ERGRJK1du5ZFixbRqlUr2rRpc//xKVPg/feNI9yDgsDLy4EhRUTEIfLnf4G33vqEa9eOU7nyYHLkMDNtGpw+7ehkIiLytySLP2azmeHDh9OyZUvatWvHhf9ZeLxkyRKaN29O8+bNmTlzps2CioiIYxw8eJBRo0ZRs2ZNhgwZAoDFAkOGQHAw+PtDz57g7u7goCIi4jAlS75G7drBnD//NXXrziRPHpgxA3budHQyERGBZBR/vvnmG+Li4li1ahXBwcGMHz/+/rVLly6xYcMGVq5cyapVq/jhhx84rRK/iEim8euvv9K7d2+KFCnClClTcHFxITERevSAceOgWzeYPh1cXR2dVEREHO2llzpTpkxTjh6dQ4MG6ylY0HifWLfO0clERCTJ4s+hQ4fu7+1Qvnx5Tpw4cf9agQIFWLBgAc7Ozjg5OZGQkEC2bNlsl1ZEROzm6tWrdOvWDTc3N0JDQ/H29iYxEdq3h9BQGDwY5s6Ff530LiIiWZjJZOKVV4bz9NPV+P77D2nW7AfKloUWLeCzzxydTkQka0vytK+7d+/i9a9NHJydnUlISMDFxQVXV1dy5cqFxWLhk08+4fnnn6dYsWJPHM9sNhMeHp725JIlxMTE6H6RZNP9Yj1RUVEMGzaMmzdv8tFHH3H79m1u3brNqFEFWL3ah6CgSNq1u8bp0xAdnZeIiHib5omO9iYi4rbVxouPjyciIsJm4z+KrZ9Dr8F2z/G/94u1x0+pzPAcmfk1pOR+Se1zWIutxq9SZSg7dvRj27beDBw4g5kzK9C2rQc//RRJhw7Xrf58GZU+t0hK6H6RtEqy+OPl5UVUVNT9n81mMy4u/3SLjY1lyJAheHp6MmLEiCSf0MnJidKlS6cyrmQ14eHhul8k2XS/WEdcXBzdunXj8uXLzJs3jxo1agDwwQewerUx4+fjj/MB+QC4cAF8fW2bycMDfH09rTZeREQEvv8Kbe3xH8XWz6HXYLvn+N/7xdrjp1RmeI7M/BpScr+k9jmsxZbjN2++kFWrWjN79gcsW/YZQ4Z4MmFCfmJi8jN5smaNgj63SMrofpHkeFKBMMniT8WKFdm5cyf169fn6NGj+Pn53b9msVgIDAykatWqdOvWzTppRUTEqm7cgNvJ/GLXbDYzYcJgDhw4wPvvT6BQoRpcuACzZ8Mnn0Dbtsb+Df/e+//ePdvkFhGRjMvLKx+NG8/niy9a07t3V5Yt+4ynn85NSAhcugRhYZA9u6NTiohkHUkWf+rVq8eePXsICAjAYrHw8ccfs3jxYooUKYLZbObgwYPExcXx/fffA9C/f38qVKhg8+AiIpI8t2/D1q1Jt7NYLOzePZHDh7+iVq1gEhIasnUr7Npl7NVQpQrUrAnbtj3Yr1o12+QWEZGMLVeuYowaNYfBgzvRs2cPlixZQtGinvTvD6+9Bl9+CXnyODqliEjWkGTxx8nJidGjRz/wWIkSJe7//fjx49ZPJSIidnfw4FwOH15C+fJtqVTp3f8+BitWQNmy0LEjOCV5TICIiMg/Spcuz+TJk+nduze9e/dmzpw5PP10Ntq0gRo14OuvoXhxR6cUEcn89DFeREQ4fHgpe/dOp3TpRtSpMxiTycSxY7B4MZQqZSz10v4MIiKSGq+88gofffQR+/btIzg4mIYN49mxA65dM2aPHjzo6IQiIpmfij8iIlnciROfs2vXOEqWrMfrr3+EyeTEmTPGce5PPw2BgeDm5uiUIiKSkTVu3Jhhw4axY8cOhgwZQvXqZvbuBS8vqFMHNm50dEIRkcxNxR8RkSzs55+/5ptvhlO0aE3eemsSTk4unD8Ps2ZB3rzQp4825BQREeto06YN/fr1Y9OmTYwePRo/Pwv79sELL0CjRjBmDJjNjk4pIpI5Jbnnj4iIZE6//babLVsG4utbngYNpuPi4sZff8HMmcY3sX37Gn+KiIhYS7du3YiKiiI0NBQPDw/ef/99du0y0b07DB8OBw7AsmXg4+PopCIimYuKPyIiWdCFC3vYuLE3efKU4p135uLq6sG9e8aMn4QEGDBAH7xFRMQ2goKCiI6OZvHixbi7u9O7d2+WLjVRrRoEBUGlSrBuHZQr5+ikIiKZh5Z9iYhkMefP/8CXXwaSK1dxmjRZQLZsT5GYaOzxc+UKdO8OBQo4OqWIiGRWJpOJwYMH07RpU+bMmcOMGTMACz17wq5dEBNjbAS9bJmjk4qIZB6a+SMikoWcP/8DGzb0JFeu4jRtuojs2X2wWGDVKjh1Ctq2hdKlHZ1SREQyOycnJ0aPHo3JZGLOnDmYzWb69u1LjRomDh+Gli2hfXvYvx+mTtXBAyIiaaXij4hIFnH+/Pds2NCLXLlK0LTpQrJnN9Z1ffut8U3r669D7doODikiIlmGk5MTo0aNwsnJiXnz5mGxWAgKCiJ/fhPffAODB8OkSXD4MKxZA4ULOzqxiEjGpeKPiEgW8HfhJ3fuEjRp8k/h56efjA/U5ctD48YODikiIlmOk5MTI0aMwGQyERoaSmJiIsHBwbi4mJg4EapWhU6djPep0FBo0sTRiUVEMibt+SMiksnt3fsNGzb0JHfuEveXegFcugQLFsDTT0PnzuCkdwQREXEAJycnhg8fTkBAAAsXLuSTTz7BYrEA0KwZ/N//QdGi0LQpdOgAt245OLCISAakj/oiIpnY+vXr+eijIPLle56mTRfh7p4TMD44z5oF2bNDz56QLZuDg4qISJb2dwGobdu2LFmyhGHDhpGQkADAc8/Bvn3w4YewfDm8+CLs3OngwCIiGYyWfYmIZFJhYWGMHTuW8uWrUbPmTNzcPAGIjYWZMyE6Gt5/H3LmdHBQERERjFPAhgwZgre3N7Nnz+bOnTtMmjQJNzc33Nxg9Gjw94d27eCVV6BfP+N9LC7Otrm8vcHHx7bPISJiayr+iIhkMhaLhdmzZzNz5kxee+01+vSZzM6dxjEpZjMsWmQs+XrvPWPJl4iISHphMpno3bs33t7ejB8/nh49ejBjxgw8PY0vMKpWhSNHYOBA4xSwTZugRQsoUsR2md54Q8UfEcn4tOxLRCQTMZvNTJgwgZkzZ/LOO+8wdepU3P51Pu4XX8DRo8YeCuXKOTCoiIjIE3To0IFx48Zx8OBBOnfuzM2bN+9f8/Q0li5//bWxjHncONi8Gf67SkxERB5BxR8RkUwiNjaWAQMG8Omnn9KuXTvGjh2Li8s/Ezx/+AG2bYP//AdefdWBQUVERJLhnXfeISQkhPDwcNq2bcvly5cfuP7GG8b7WsWKsGEDjB0LZ886KKyISDqn4o+ISCZw8+ZN3n33XbZs2UJwcDCDBw/G6V/Hd50+bWyS+fzz0LIlmEwODCsiIpJMr732GgsWLCAyMpKAgABOnjz5wPWcOaFrVwgMhHv3YOJE+Owz4+8iIvIPFX9ERDK433//ndatW/PTTz8xadIkunTpgulf1Z1ff4V58yB/fujWDZydHRhWREQkhapUqcJnn32Gm5sb7dq1Y+cjjvoqVw5GjoS6dWH3buPvR4/aPaqISLql4o+ISAZ24sQJAgICuH79OgsXLsTf3/+B63/9Be++axR8evUyjnYXERHJaEqWLMnKlSspXrw4vXr1YsWKFQ+1cXc3ZrcOGgReXjBnjvHfjRsOCCwiks6o+CMikkFt27aN9u3b4+7uzvLly6lcufID12NjoXFjiIgwpsPnyeOgoCIiIlaQN29ePv30U15++WVGjx7NJ598QmJi4kPtihWDIUOgSRM4edKYBbRzp3HipYhIVqXij4hIBmM2m5k5cyZ9+/alVKlSrFixghIlSjzQxmKBLl2MTZ4nT4bixR0UVkRExIo8PT2ZMWMGrVu3ZvHixYwc+R4xMbcfaufsbGwIPWKE8R64ciV8/DGcO+eA0CIi6YCKPyIiGUhUVBRBQUHMmjWLxo0bs3TpUvLmzftQu7FjISwMxoyBBg0cEFRERMRGXFxc+PDDDxkxYgSHD+9j5cqWXL/+6KpO3rzQp4+x592dOzBhAixdCnfv2jm0iIiDqfgjIpJB/P7777Rp04YdO3bwwQcfMHbsWLJly/ZQuxUr4MMPoV07GDrUAUFFRETsICAggAkTFhMTc5sVK1py7tx3j2xnMsFLL8GoUfD667Bvn/E+uXu3loKJSNah4o+ISAawd+9emjdvzpUrVwgNDaVDhw4PnOj1t61boUMHePllmD9fR7qLiEjmVqZMJVq3XkPOnE/z5ZeBHDwYisXy6IqOuzs0bWoUfgoXhuXLYfx4OH/evplFRBxBxR8RkXQsMTGRWbNm0aVLF/LkycPKlSupWbPmI9vu329sbvn887BhAzxiUpCIiEim4+1dkBYtlvPss2+xZ89UvvyyJzExNx/bvmBB6N/fOA3z5k2jALR8uZaCiUjm5uLoACIi8mjXrl1j4MCB7N27l0aNGjF8+HA8PDwe2fbkSfD3B19fY/ZPjhx2DisiIvIICQlw4YLtxr93z/jT1TU7b701CV/fCuze/QlhYU3w95+Kr2+5R/YzmaBKFShbFjZuNE4DO3TI+BKlRg1w0lfkIpLJqPgjIpIOHTp0iP79+3Pr1i3GjBlD06ZNH7nMC4wP1W+8Ycz02b4d8ue3c1gREZHHiIoyZqbaSrVq//zdZDJRoUJbfH3LsXlzEKtXt6N27WAqVGj/2PfQ7NmhRQuoWRM++wyWLTNOymzdGooUsV1uERF7U01bRCQdSUxMZN68eXTo0AF3d3dWrlxJs2bNHvuhNTLS2LwyKsqY8VOsmJ0Di4iIpDMFCpSlTZt1PPNMbf6/vfsOj7LK+z/+npnUSUglAQwEQy8RaYuAgiIbUJHysxJ2AzwiYHkUFAR37boC69qelUXXspYgTURwsVLEiEiViCAtBIIUIZCQkEmZZGZ+fxxSKSFIEgif13Wd6+53zo3HMzPf+5Rvv53G4sUPnrEbGEBUFEycCP/zP3DkiJkWfvZs8/kqIlIXKPgjInKB2L9/PyNGjODVV1+lX79+zJ8/nzZt2pz2/OxsuPFG+PVXWLzYNF0XERER8PMLZtCg6fTuPYnU1BV88MFg0tJWnfEai8W0JHr2WbjuOvj2W3jqKfjoI80KJiIXPwV/RERqmcfj4dNPP2XIkCFs27aNadOm8dJLL1GvXr3TXpOfD4MHw6ZNMH++aa4uIiIipSwWC126/A9Dh87B1zeQBQtGsWLFVIqKCs54nd0OQ4fCY49BRAQ88oiZRfOnn2oo4yIi1UDBHxGRWpSVlcWECROYPHkyrVu3ZtGiRQwePPi03bzADJ4ZHw8rVsB778FNN9VYdkVERC46DRq0Z9iw+XTs+Cc2bvyAWbNuJz19W6XXNWliAj8vvADbt0PnzjBuHGRl1UCmRUTOMwV/RERqydKlS7n55ptZsmQJ48eP5/333ycqKuqM1zidMHw4LFwI//d/8Kc/1VBmRURELmLe3v706fM4Q4b8m7y8TGbPvoM1a17H5So843VWqxkQevt2GDsWXnsNWreGmTPB46mhzIuInAcK/oiI1LCMjAwefvhhHnjgAerXr8+cOXMYO3YsNpvtjNfl5MDAgWYAyr//HR58sIYyLCIiUkfExPRm+PBPad78j6xa9U9mzbqdQ4e2VHpdWBjMmAFr10LTppCQYMYF2ry5+vMsInI+KPgjIlJDPB4Pn332GQMGDGDp0qWMGzeOefPm0b59+0qvTU+H66+HZcvgP/+BSZNqIMMiIiJ1kL9/KAMGvMygQdPJy8tg9uw7+O67Fykqyq/02q5d4Ycf4M03TeCnY0eYMMFMwiAiciFT8EdEpAbs3buXe+65h4kTJxIdHc2CBQu455578Pb2rvTaPXvgmmvg55/hk0/MNLQiIiLy+zRv3pfhwxfTvv0trF//DomJQyqdEQxMV7DRo01XsLvugpdfNl3BPvhAs4KJyIVLwR8RkWqUn5/P9OnTGThwIOvXr+fRRx9l1qxZtGjR4qyu37QJevaEw4dh6VLT7UtERETODz+/IOLinuPWW/+Dx+NhwYJRLF78EMeP/1bptfXrmxZAq1dDdDSMGGFm31y3rgYyLiJSRQr+iIhUk2+//ZZBgwbxr3/9i7i4OL744lA52lUAACAASURBVAtGjBhR6dg+xb77zkwta7XCypWazl1ERKS6REf3YPjwT+nR4wFSU7/h/fcHsG7d27hczkqvveoq0xXs3Xdh926zfffd5sWNiMiFQsEfEZHzLDU1lfvuu6+kW9e7777Liy++SGRk5FnfY+FCiIuDhg1h1So4i2GBRERE5Hfw8vKle/f7GDFiMdHRPVi58iVmzvx/rFuXhKeSqb2sVhg5EnbsMGMAvf8+tGwJr7wChWeeUExEpEYo+CMicp5kZGTw3HPPMWjQINauXcuECRP45JNP6N69+1nfw+2Gl16CW2+FK680LX6io6sx0yIiIlJOcHBjBg2azpAhb+B2F/HEE2MZNWoUW7durfTaoCD4xz/MOH09e8LDD5vP8y+/1NTwIlK7vGo7AyIiF7v8/HwSExP597//TX5+PnfccQf3338/4eHhVbpPWpoZL+Dbb2HIEEhMhMDAasq0iIiInFFMzLVER/cgP38uc+bM4NZbb6Vv38GMGDGOiIiGZ7zW3x9efx2WL4fnnoMbbzSTN/zlL6WteXNzI0hLMwGj0NAaeCARuaQp+CMico6cTieffPIJb7zxBr/99ht9+vRh4sSJNGvWrEr38XhM8/AHHzTr77xjZvSyWKop4yIiInJWbDYf+vZNwGYbzLp1b/LNN4l8880XdOz4J7p2HYXdHlbpPSZOhKQk+OwzuPlmMybQ4MFQUFBIo0bQv7+CPyJS/RT8ERGpoqKiIj799FNmzJjB/v376dixI9OmTeOqq66q8r0OH4axY80YP717w3vvQUzM+c+ziIiInDs/vyB69ZrIlVfG8/33/8eGDe+yadMcOnVKoEuXkfj5hZz2Wm9v6NsXevQw3b+WLYP16+Gqq+px2201+BAicklT8EdE5CwVFRXx+eefM2PGDNLS0oiNjeXJJ5+kV69eWM6hmc6iRTB6NGRlwYsvwvjxcJYTgYmIiEgtCAqK4sYbX6Bbt7GsWTODtWvfJDl5Jp06jaBz5+H4+QWf9lq7HW65Ba67znwH+P77AJKTISMDHn8cfHxq7jlE5NKjAZ9FRCqRl5fHhx9+yA033MDkyZPx8/Nj+vTpzJs3j969e1c58JOZCXfdZcb1iYqCDRvMzCAK/IiIiFwcwsObc9NNL5GQsJCmTa9hzZoZvP329SQlvUBOzqEzXhsWZrp3jx17hOhoMyZQy5bwxhtQUFBDDyAilxy1/BEROY2srCxmz55NYmIiGRkZdOrUiccee4xrr70Wq7XqsfNDh8yUrzNmgMMBf/0rPPWU3vSJiIhcrOrXb8XNN79Kevp21q9/mx9//ICNG2fStu1AunS5i/Dw5qe9tlGjIsaNMy2CZsyAe++FKVPg0Udh1Cjw9a3BBxGROk/BHxGRClJTU/nwww9ZuHAhubm59O7dm9GjR9O1a9dzul9ampn29Z13wOmEO+4ws3106HCeMy4iIiK1IiKiNTfe+A969hzHhg3vsnnzx2zZsoBmzfrQseOfiY7uccqWwhaLGfPvz3+GJUvgmWfg/vtLg0B33w1+frXwQCJS5yj4IyICuN1uvvvuO2bOnMnKlSvx9vZmwIABjBgxgjZt2pzTPbdtg2nT4MMPzZe7ESNg0iTTtFtERETqnuDgxlx//RN0734/yckz2bRpLqmp3xAW1pyOHYfRtu1gfHwCTrrOYoF+/SAuzkwP/8wz8MADJgg0eTKMGWOmjxcROVcK/ojIJS09PZ2FCxcyf/589u7dS2RkJOPGjeP2228nPDy8yvfLz4dvvjGtfBYsMG/r7r/fjOnTpEk1PICIiIhccOz2MHr2fJBu3cayY8cXJCd/yPLlz7Fy5Su0azeE2NjbgKCTrrNYzMxg118PK1aYIND48fDssyYAdO+9EB1d448jInWAgj8icskpKipi5cqVzJ8/nxUrVuByuejSpQvjxo0jLi4Ob2/vKt0vPR0++ww+/RS+/tqM5xMcbMb0GTcOIiKq6UFERETkgubl5Uu7dkNo23Ywv/32E8nJH/Lzz3NJTp5JWFhrOnWK55prBgCB5a6zWKBPH5O++w5efRVeeMF0Ix8yBB58EHr1MueJiJwNBX9E5JKxfft2/vvf/7J48WIOHTpEeHg4I0eO5NZbbyUmJuas7+PxwNat8N//moDPDz+YfVFRkJAAgwaZL2vqoy8iIiIAFouFRo060qhRR6677q9s27aYjRvnsGzZ06xc+XduuKEfAwcO5KqrrsLLq/xPtF69TEpLMwNDv/UWfPwxXHml6Ro2bJi6hIlI5RT8EZGLVmYmZGeXbufmRpCWVv6cw4cPsGLFZyxf/l/27NmJzeZFly5XM3r0X7nqquvw9jZTbVW8rpi3Nxw4AD/9VJo2bYJjx8zxzp3hySdNwKdTp6q/gav4DNUhL6967y8iIiJnz98/lE6dEmjQoC9W61EyM+ezdOkXLFq0iNDQ+vTufSN9+gygdesOJw0Sfd99Zpr4RYvgvffMgNATJ8Itt5gWQVdccervIkFBEBpaM88nIhcmBX9E5KKVnQ1ffVW6ffBgIY0awbFjv5KSsoSUlK85ePAnABo16sT11z9Bq1Y34u8fisNhBlQEM05PZiZkZMDRo2Z55Ajs2weHD4PLZc4LCDBfqu68E7p0gRtu+P3j+FR8hurQvXv13l9ERESqzmKx0LDhFQwZcgUtW/6VPXuS2Lp1MYsXz2XRokSCg5vQokUcLVvG0bBhBywWa8m1oaFmLKCdO81Ygx98AP/5DzRoAH/4A3TrZtaL9e+v4I/IpU7BHxG56Hk8Ho4c2cGWLYtYtmw16elbAYiIaEenTuOJiLiJoqImZGXB0qUm4JKVZYI8GRlmjJ6yrFbzBSkqCm67zUzBeuWV0Ly5OSYiIiJyPnl5+dKiRRwtWsRRUHCclJQlbN/+BRs3JrJhw38IDGxAixZ/pHnzPxIV1QWbzRuLBVq1MsnhgI0bYe1aMw7h4sVw+eUmEPSHP9T204nIhUDBHxG56OTmws6duSxcuIYVK77l6NEkCgsPnjjaifz8SWRkxLFtW+NTXh8YaAZkDguDZs3MsmwKDgabzZzbty8Ud73/9dfz/yzqkiUiIiJl+frWo337W2jf/hby87PZvXsFKSlL2Lz5Y5KTP8THJ5Do6J40a3Ytl1/ei4CACAIC4JprTMrMhPXrYc0a+OgjmD8f5s2DgQNNC6CuXUu/54jIpUPBHxG54Bw7BikpZhyevXvNMi3NxZ492zh6dBWwGn//9VitTlwuO7m5PcnNvQ+4mpCQRoSEmGlQg4NNH/fg4NIUFFS1LzwOB6xeXV1Pqi5ZIiIicnp+fkG0bTuItm0HUViYS1raKnbvTmLPniRSUr4GIDKyHdHRPYiO7sFll3UmNNSfuDiIi4ODB2HdOvMC6+mn4amnTOvmvn1NIKhfP00dL3KpUPBHRGqFw2ECPDt3wo4d5Zfp6QBufH1T8PdfT1DQWuz21UAWAQEQEtKSVq2G0rLltRQUdCUszAe7HX777SCNGtXyg4mIiIhUA29vOy1a/JEWLf54osv79pJA0I8/fsD69e9gs3nTqFEnoqO7ExXVlYYNOzBokC/9+5uxC5cuha+/Nmn+fHPfNm3g6qtNi6AuXaBDB/D1rd1nFZHzT8EfEak2mZkmkLNrlwnsbN9ugjvbt5/chapBAweNG28jNnYjHs8GMjM3UlCQBUBERCM6depLp049uPLKqwgLiwBMl6mkpJp+KhEREZHaZbFYiIhoQ0REG7p1G4PT6WD//g38+utq9u5dzapV/wTAZvOmQYMr2L+/M336dKFfvw4MHRqGxwO//GKCQEuWwCefwDvvmHt7e0NsrAkEFQeE2rY1wSMRuXgp+CMi54XHY6ZET042Aw7+9JNZ7t4Nbrc5x2qFhg2hUaN82rTZho/PFoqKNpOdvZljx1JxONw4HBAaGkPLlnFERXUhKqorQUFRWCwWnE7TdLmYukyJiIiIgI9PADExvYmJ6Q1AXl4mBw5sZP/+DRw4sIGPP36PefPeBqBRo0bExsYSGxtLt27tGTmyHSEhoaSlmbGCNmwwy48/hrffLv0bDRtCixZmAowWLcqvh4Sceop5EblwKPgjIlVWVGRa8hQHepKTTTpypPSc4i8DLVs6CA7ehZfXVvLyNpOevoWjR3fy669FANjt4TRoEEvr1v1p0KA9DRt2wG4Pr6UnExEREbn4+fuH0rz59TRvfj0A116bR1bWz2zZsoXNmzezefNmlixZUnJ+48aNiY2NpV27dgwaFMsjj7QmNDSM3bvhxx/N976UFNOae8kSeP/98n/PbjfBoYqpUSMz5Xz9+hAebibWCA3VgNMitUHBH6lxmZlmqu2zkZsbQVpa1e4fFGQ+VOT8yMmBn38uH+j5+WfIzzfHfXzgiitgwIAsoqJ2ERCQQlFRKr/+uovt23eRnn6w5F5+fsE0aBBLTMwoGjSIpUGDWAIDG2DRqyIRERGRauPn50/r1t3o1q1byb7s7Gx++eUXNm/ezJYtW9iyZQtffvllyfHQ0FCaNWtG8+bNad68Odde25xmzZrRsGFD8vIspKaaYNCuXZCaCvv3m+7+mzfD8uVmAo/TKf6+HhJSmkJDzeQcp9pfvO7xVN+/kX5DSF2n4I/UuOxs+Oqrszv34MHCKg/g27+/Ku5z4XabLlqbN5vgTnHAZ+fO0g/asLDjtG//K7fcso/Q0P3YbL9y7NhuUlNTWLOmtNmPn58fzZo1Iza2K05nc8LCmhER0bak+5aIiIiI1K6goCC6d+9O9zL96I8dO8Yvv/zCzp07SU1NZdeuXXz11VdkZWWVnBMQEFASFLr88stp3boxbdtexrZtjbHb65d81ysshOPHzXf/nBwz2cepUlqaGX/I4YDc3NPn12oFf38IDDQtjQIDzThElSU/v7PrkqbfEFLXKfgjFxSXy7QoKSgwywMHvHE4zP6KqajIBCWs1vLJYjED1dlsplVKQID5oLDbS5OPz+/L58X8ZsDthn37TH/u5GQz+PK2bbBzp4f8/GN4e6fj5XWIyMh9RETso3fvfXg8+8jJ2U9ubhbp6cWzcUFAQD2aNImhc+feREc3p0mTZjRt2oLIyMuwWq0akFlERETkIhISEkLPnj3p2bNnyT6Px0NGRga7du1i165dpKamkpKSwvfff8/ChQvLXe/l5UdQUBTBwVEEBTU+sd6YiIgoLr88Ars9HKv19H2+3G4TADpVsCgkxHQ/K97OyjLjTTocpS3ST8VqhXr1TAoMLL8su96ihVmGhJhrqkNVekBUdDY9Ii7m3yhS/RT8kWrhdMLRoyZIcORI+eXu3bBli6nUc3NNZV2cCgsr3ql+teTPajVTWPr7m+CQ3V5+WZxOte3jAzfccGFXrE4nHDxomuFu317IL78cIyUlk7S0oxw6lA4cxsvLJF/fw/j4HCY6Oh1wlruPw+GDzWY+tBs27EBwcGOCg5uUfJD7+QWXO//YsfJNfDUgs4iIiMjFzWKxEB4eTnh4eLluYwC5ubns37+fjRv3sWLFAbKy9pGdvY+srP0cOLCRgoLjFe5lxW6vT2BgJAEBEQQERBIYWLw0+/z9w6hfP5SGDcvPN9+9O6xefeo8FhWVBo1OFTw6ftzsO37ctDTKzj45YPTii2Zps5kxiiIiIDLSrIeGlnY/K9sNrbirWtlWSF5n+IVdlR4QFZ1Njwi1XpIzUfBHKuXxmIrqVIGc0y3PFNEODjaBl+LIup/f6VNOTgaRkWHYbJRLXl6lA8V5POYtQXFq1w42bTLrhYUmEFJQUJrKbuflmQ8Ih8MES4o/IFyu0+ffy8tUqhERZtC6sik0tPx2vXqlQaNzbXnkdJoPqowMJ4cP53D4cDZHj+Zw9Gg2hw4d59Ch4xw5ksWxYxnk5BwjLy8TtzsDmy3zRCr/oRsZaZY+PgH4+0cSFBRJQEDnEx+4kSXL4ODGBATUx2KpplcfIiIiInJRs9vttGzZEh+flqcc4yc/P4usrH0cP34AhyMdhyOdnJzDOBzpZGcf4ODBn8jLyzjlvb297fj7h+DnF4q/fyjr1oXicJh1f/9QfH3r4esbhK9vIL6+Qfj4BBIZGYTN5ntWwwwUFpqAUHFQKCbG/K4obuV++LBZJiebFjuZmSbIVJningcVXx57e5vfGFlZnPTb5mxSbm5AyWDZXl6lv4eKlzab+S3y22/mb/n4mOTrWxqc8vXVrGyXskqDP263m6effprt27fj4+PD3/72N5o2bVpyfN68ecyZMwcvLy/uvfde+vTpU60Zlt+nqMhUOMUpM/PsAjont8gx/PxMEKR+fZOaNy9dL95f9nh4uBkM7uzH/Cmo8pg/sbGmEj9XHo8JDBUHhYqXxSk31wR2nE7IyDBvDzZuNP+WOTluLBYnFksBFosTq9WJxZKL1ZqH1Zp3Yj0XL688/PxK95mUdyLllizBgcWSjc12HKv1DO1ZAfDByyuM8PBQAgJCCAmJomHDMKKjQ2jaNJSwsFDCwsKIjIwkMjKSI0cCzvnNg4iIiIhcPIqKqPIkKlWRl3fq/X5+wScm/Gh/2mtdLicOxxEcDhMUysvLJC/v2IllJvn5ZnvHjj0cO5aJ0+k4Y16sVu8TgSETFPL2tuPt7X8i2Sts++PlZbYjI/1p2tSOv78/drtZ+vn54ePjcyL5UlBgK2npnplZ2ur9dOMZFbdEKiw0qfjl86mGtDhdKhVU6X+HV18983GbzQSBAgNLA0IV1093vLiLXMX1wEDN3naxqDT4s3TpUpxOJ3PnziU5OZlp06bx+uuvA5Cenk5iYiIff/wxBQUFDBs2jKuvvhqf3zugykXK4ymf3O4zLz0e8z90cWXgdJpUuu450UrFc2Kfp9yxwkLIz/ecCE54TqpscnM95ORAVpaH7GzIzjbnQPEw+aXD5RdHgENCPNSvD2FhHqKjoXNnD2FhlOwzARzPiakaPdjtFf8NPCVLt9tdsnS73RQVeTh40M2BA24yM4uPuQAPHo/7RCq77ubIkSO4XPuBiseK110n7Xe7XWzfXoTb7cLtLjyxLCqzLH/M43HhchXh8RSdWJY/z+UqxOVynkgFuFxOjh514vE4cbud+PsXEBHhJCSkkMLTRcnOyIrN5o/NZsfLyyzNdiC+vo3w9w8kMDCIevXqERwcRHBwIGFhQdSvX48mTYKIjq5HaGgQdru9SoMpl52WXURERETqLofj9F2mzoff09XfZvMhKOgygoIuq/RvrF4NRUVO8vOPUVCQTUHB8XLJ6TxeYV82hYW5OBzpFBbmnUi5FBbm4XaX/95eZqKzM+TVViYYVD75+vri7e1dsh0Y6ENIiBdeXibZbDby8mzs3++N1WrDavXCavXCYrFhs3lhsXiV2V96HGyAN8eOHScoKAy324rHY8XjseB2W0u2XS4LLVtaCQ62UlRkweWy4XJZcDqt5OdbKSiwkpdnITfXbOfmWsjLs5KXZ+XwYQsOh5XcXLPf4bBSWGjD47EAVsByIpWdca10n5+f5USwyHIiIGQ5ETiyYLebBgO+vhZ8fMy5vr5nWpbfZ8ZytZxo5WSpsG4CT1Zr+VZSZbeLx29Si6ezCP5s2LCBXr16AdCxY0c2b95ccmzTpk106tSppIBHR0ezbds2OnToUH05vkA8//zzfPTRfPLzSwMeFYMq5QvYqc8pPbca5y3EDP4VVHmwuERxFDslpfryVNssFuuJirW0AjaVrzcWi61cpevl5YvN5o23dwB+fqFERfkSGuqDt7c3vr6+5Sr9ih8E/v7++Pv7ExAQULJe/EbBbrfj4+OjGbBERERERM6Cl5cPgYFmqILfw+UqpLAwj6IiExDq0iWXkJA88vJMys3NJT8/H6fTidPppKCggMLCwnLbxeuFhYUl23l5eWRlZVFQUIDL5cLlclFUVERRURFOp4v8/KJyL6Y9njOMN1FFa9b8vuuLh6io/zuGXS0sLO0mV5NMoAqKA1Jlg1OnDlwZ3t4QERHGggULCK3jAyZZPKWRi1N67LHH6NevH9deey0A1113HUuXLsXLy4tFixaxY8cOHnnkEQAmTZrEkCFDyo0OX1FycjK+vr6nPS4iIiIiIiIiIlVTUFBAx44dT3ms0pY/gYGBOByl/SrdbjdeJ4Ywr3jM4XBQr169M97vdBkREREREREREZHzr9JpfDp37kxSUhJgWu20atWq5FiHDh3YsGEDBQUFHD9+nF27dpU7LiIiIiIiIiIitavSbl/Fs33t2LEDj8fDlClTSEpKIjo6mr59+zJv3jzmzp2Lx+Nh7Nix9O/fv6byLiIiIiIiIiIilag0+CMiIiIiIiIiIhevSrt9iYiIiIiIiIjIxUvBHxERERERERGROqxagj8//fQTCQkJAKSlpREfH8+wYcN46qmncLvd5c7Nz8/ngQceYNiwYYwePZqMjIzqyJJcoKpSVjweD7169SIhIYGEhAReeuml2siy1KKy5aXYlClTmD179knnut1unnzySe68804SEhJIS0urqWzKBaIq5QVgyJAhJfXLX/7yl5rIolwgypaVrVu3MmzYMBISEhg1ahRHjhwpd67qFqlKeQHVLZe6suUlJSWF+Ph4hg4dytNPP43L5Sp3ruqXS1tVygqobpGqO+/Bn7feeovHH3+cgoICAKZOncr48eOZNWsWHo+HZcuWlTt/9uzZtGrVilmzZjFkyBBmzJhxvrMkF6iqlpW9e/fSvn17EhMTSUxMZMKECbWRbaklFctLRkYGd999N8uXLz/l+UuXLsXpdDJ37lwmTJjAtGnTajK7UsuqWl6KzyuuX6ZOnVpjeZXaVbGsPP/88zzxxBMkJiYSFxfHW2+9Ve581S2XtqqWF9Utl7aK5eXll1/m4YcfZs6cOeTn55/0maT65dJV1bKiukXOxXkP/kRHR/Paa6+VbG/ZsoVu3boB0Lt3b1atWlXu/A0bNtCrV6+S4z/88MP5zpJcoKpaVrZs2cKhQ4dISEhg9OjRpKam1mh+pXZVLC8Oh4MHHniAwYMHn/L8snVLx44d2bx5c43kUy4MVS0v27ZtIy8vj7vuuovhw4eTnJxcU1mVWlaxrLz88su0bdsWAJfLha+vb7nzVbdc2qpaXlS3XNoqlpfXXnuNP/zhDzidTtLT0wkPDy93vuqXS1dVy4rqFjkX5z34079/f7y8vEq2PR4PFosFgICAAI4fP17u/JycHOrVq3fa41J3VbWsREREMGbMGBITExk7diyPPPJIjeZXalfF8tKkSROuvPLK056fk5NDYGBgybbNZqOoqKha8ygXjqqWFz8/P0aNGsU777zDM888w8SJE1VeLhEVy0pkZCQAP/74IzNnzmTkyJHlzlfdcmmranlR3XJpq1hebDYb+/fv5+abbyYzM5OYmJhy56t+uXRVtayobpFzUe0DPlutpX/C4XAQFBRU7nhgYCAOh+O0x+XSUVlZiY2NpW/fvgB07dqVQ4cO4fF4ajSPcvEoW7eA6Udf9kNVpKyYmBgGDRqExWIhJiaGkJAQ0tPTaztbUks+//xznnrqKd58803CwsLKHVPdIhWdqbyobpGKoqKi+Prrr4mPjz+pW5fqFynrTGVFdYuci2oP/rRr1441a9YAkJSURNeuXcsd79y5M99++23J8S5dulR3luQCVVlZmT59Ou+//z5gmjpedtllJS2FRCrq3LkzSUlJACQnJ9OqVatazpFcyObPn1/yxerQoUPk5OQQERFRy7mS2rBo0SJmzpxJYmIiTZo0Oem46hYpq7LyorpFyrrnnnvYs2cPYFq5l33xCapfpFRlZUV1i5yLag/+TJ48mddee40777yTwsJC+vfvD8Bdd92F0+kkPj6enTt3Eh8fz9y5c/nf//3f6s6SXKAqKytjxoxh3bp1/PnPf2bq1Kka2ExOadKkSRw4cIC4uDh8fHwYOnQoU6dO1SwIckrF5eW2227j+PHjxMfH89BDDzFlyhS9bb0EuVwunn/++ZIxohISEvjnP/8JqG6Rk51NeVHdImWNGTOGRx99lISEBBYuXMhDDz0EqH6Rk1VWVlS3yLmweNRvRkRERERERESkzqr2lj8iIiIiIiIiIlJ7FPwREREREREREanDFPwREREREREREanDFPwREREREREREanDFPwREREREREREanDNB+ciIiI1Blvvvkmq1atwmq1YrFYeOihh4iNjT3pvH379vHwww8zb968U95nzZo1jB8/nhYtWgBQUFDAwIEDSUhIKHdeUlISBw8e5M477zz/DyMiIiJynij4IyIiInVCSkoKy5cvZ/bs2VgsFrZu3crkyZP59NNPz+l+3bt355VXXgHA6XRyww03MHjwYIKCgkrO6d2793nJu4iIiEh1UvBHRERE6oSwsDAOHDjA/Pnz6d27N23btmX+/PmsXbuW6dOnA5Cfn8/f//53vL29S65bu3Ytr7zyCjabjSZNmvDss8+edO+cnBysVis2m42EhARCQ0PJzs5mwIABpKWlMXHiRGbMmMHSpUtxuVzEx8czdOhQEhMTWbx4MRaLhZtuuonhw4fX2L+HiIiISDEFf0RERKROCAsL4/XXX2fmzJn861//ws/Pj4ceeogjR47wj3/8gwYNGvDGG2/w5ZdfMnDgQAA8Hg9PPPEEs2bNIjw8nFdffZVPPvmEpk2bsnr1ahISErBYLHh7e/PEE08QEBAAwMCBA4mLi2PBggUA/PLLLyQlJfHRRx/hdDp56aWX2LlzJ59//jmzZs3CYrEwcuRIrrnmGpo1a1Zr/0YiIiJyaVLwR0REROqEtLQ0AgMDmTp1KgA///wzY8aMYdKkSTz//PPY7XYOHTpE586dS67JyMjg8OHDjB8/HjAtg66++mqaNm1arttXRTExMeW2d+/eTYcOHbDZbPj7+/P444/z+eefc+DAAUaOHAlAVlYWe/fuVfBHREREapyCPyIiIlInbN++ndmzXIQnbAAAAV1JREFUZ/PGG2/g6+tLTEwM9erVY8qUKXzzzTcEBgYyefJkPB5PyTWhoaE0bNiQGTNmUK9ePZYtW4bdbq/0b1kslnLbzZo1Y/bs2bjdblwuF2PGjGHy5Mm0aNGCt99+G4vFwnvvvUerVq3O+3OLiIiIVEbBHxEREakT+vXrx65du7j99tux2+14PB4mTZrEunXruOOOOwgKCqJ+/focPny45Bqr1cpjjz3GmDFj8Hg8BAQE8MILL5CSklKlv922bVt69epFfHw8breb+Ph42rRpQ48ePYiPj8fpdNKhQwcaNGhwvh9bREREpFIWT9nXXyIiIiIiIiIiUqdYazsDIiIiIiIiIiJSfRT8ERERERERERGpwxT8ERERERERERGpwxT8ERERERERERGpwxT8ERERERERERGpwxT8ERERERERERGpwxT8ERERERERERGpwxT8ERERERERERGpw/4/NBrNKXyLJIwAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 1440x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Transforming target variable SalePrice\n",
    "preprocessing_train_df['SalePrice'] = np.log1p(preprocessing_train_df['SalePrice'])\n",
    "\n",
    "plt.figure(figsize=(20,8));plt.title('Histogram of SalePrice after a Log Transformation ')\n",
    "sns.distplot(preprocessing_train_df['SalePrice'], color='blue', fit=stats.norm, norm_hist=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing 'SalePrice' column from train dataset before merging all the data\n",
    "target = preprocessing_train_df.SalePrice.copy()\n",
    "preprocessing_train_df.drop(['SalePrice'], axis=1, inplace=True)\n",
    "\n",
    "# Merging both datasets into a single one\n",
    "\n",
    "Merged_df = pd.concat(objs=[preprocessing_train_df, preprocessing_test_df], axis=0).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Merged Dataset \n",
      " Variables:\t79\n",
      " Inputs:\t2917\n"
     ]
    }
   ],
   "source": [
    "# Creating another checkpoint\n",
    "\n",
    "preprocessing_Merged_df = Merged_df.copy()\n",
    "\n",
    "# Checking the dimensions of the Dataset\n",
    "\n",
    "print(\"Merged Dataset \\n Variables:\\t{}\\n Inputs:\\t{}\".format(Merged_df.shape[1], Merged_df.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### I have merged both train and test data sets into a single one called Merged_df in order to perform all the preprocessing steps at once in all the data.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PoolQC</th>\n",
       "      <td>2908</td>\n",
       "      <td>99.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MiscFeature</th>\n",
       "      <td>2812</td>\n",
       "      <td>96.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Alley</th>\n",
       "      <td>2719</td>\n",
       "      <td>93.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fence</th>\n",
       "      <td>2346</td>\n",
       "      <td>80.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FireplaceQu</th>\n",
       "      <td>1420</td>\n",
       "      <td>48.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LotFrontage</th>\n",
       "      <td>486</td>\n",
       "      <td>16.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageCond</th>\n",
       "      <td>159</td>\n",
       "      <td>5.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageQual</th>\n",
       "      <td>159</td>\n",
       "      <td>5.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageYrBlt</th>\n",
       "      <td>159</td>\n",
       "      <td>5.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageFinish</th>\n",
       "      <td>159</td>\n",
       "      <td>5.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageType</th>\n",
       "      <td>157</td>\n",
       "      <td>5.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtCond</th>\n",
       "      <td>82</td>\n",
       "      <td>2.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtExposure</th>\n",
       "      <td>82</td>\n",
       "      <td>2.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtQual</th>\n",
       "      <td>81</td>\n",
       "      <td>2.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinType2</th>\n",
       "      <td>80</td>\n",
       "      <td>2.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinType1</th>\n",
       "      <td>79</td>\n",
       "      <td>2.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MasVnrType</th>\n",
       "      <td>24</td>\n",
       "      <td>0.82</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MasVnrArea</th>\n",
       "      <td>23</td>\n",
       "      <td>0.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSZoning</th>\n",
       "      <td>4</td>\n",
       "      <td>0.14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtHalfBath</th>\n",
       "      <td>2</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Utilities</th>\n",
       "      <td>2</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Functional</th>\n",
       "      <td>2</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFullBath</th>\n",
       "      <td>2</td>\n",
       "      <td>0.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinSF2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Exterior2nd</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BsmtUnfSF</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalBsmtSF</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Exterior1st</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SaleType</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Electrical</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KitchenQual</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageArea</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GarageCars</th>\n",
       "      <td>1</td>\n",
       "      <td>0.03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              Total      %\n",
       "PoolQC         2908  99.69\n",
       "MiscFeature    2812  96.40\n",
       "Alley          2719  93.21\n",
       "Fence          2346  80.43\n",
       "FireplaceQu    1420  48.68\n",
       "LotFrontage     486  16.66\n",
       "GarageCond      159   5.45\n",
       "GarageQual      159   5.45\n",
       "GarageYrBlt     159   5.45\n",
       "GarageFinish    159   5.45\n",
       "GarageType      157   5.38\n",
       "BsmtCond         82   2.81\n",
       "BsmtExposure     82   2.81\n",
       "BsmtQual         81   2.78\n",
       "BsmtFinType2     80   2.74\n",
       "BsmtFinType1     79   2.71\n",
       "MasVnrType       24   0.82\n",
       "MasVnrArea       23   0.79\n",
       "MSZoning          4   0.14\n",
       "BsmtHalfBath      2   0.07\n",
       "Utilities         2   0.07\n",
       "Functional        2   0.07\n",
       "BsmtFullBath      2   0.07\n",
       "BsmtFinSF2        1   0.03\n",
       "BsmtFinSF1        1   0.03\n",
       "Exterior2nd       1   0.03\n",
       "BsmtUnfSF         1   0.03\n",
       "TotalBsmtSF       1   0.03\n",
       "Exterior1st       1   0.03\n",
       "SaleType          1   0.03\n",
       "Electrical        1   0.03\n",
       "KitchenQual       1   0.03\n",
       "GarageArea        1   0.03\n",
       "GarageCars        1   0.03"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Table of Missing Values for the Merged Dataframe\n",
    "\n",
    "Total_Missing=Merged_df.isnull().sum().sort_values(ascending = False)[Merged_df.isnull().sum().sort_values(ascending = False) != 0]\n",
    "Percent_Missing=round(Merged_df.isnull().sum().sort_values(ascending = False)/len(Merged_df)*100,2)[round(Merged_df.isnull().sum().sort_values(ascending = False)/len(Merged_df)*100,2) != 0]\n",
    "Merged_Missing = pd.concat([Total_Missing,Percent_Missing], axis=1, keys=['Total','%'])\n",
    "Merged_Missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing blank spaces with 'None'\n",
    "none_replace = [\"PoolQC\",\"MiscFeature\",\"Alley\",\"Fence\",\"FireplaceQu\",\"GarageCond\",\"GarageQual\",\"GarageFinish\",\"GarageType\",\"BsmtCond\",\"BsmtExposure\",\"BsmtQual\",\"BsmtFinType2\",\"BsmtFinType1\",\"BsmtFinSF1\",\"BsmtFinSF2\"]\n",
    "\n",
    "for i in none_replace:\n",
    "  preprocessing_Merged_df[i] = preprocessing_Merged_df[i].fillna('None')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing blank spaces with '0'\n",
    "zero_replace = [\"GarageYrBlt\",\"MasVnrArea\",\"BsmtHalfBath\",\"BsmtFullBath\",\"BsmtUnfSF\",\"TotalBsmtSF\",\"GarageArea\",\"GarageCars\"]\n",
    "\n",
    "for i in zero_replace:\n",
    "  preprocessing_Merged_df[i] = preprocessing_Merged_df[i].fillna(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing blank spaces with the mode\n",
    "\n",
    "preprocessing_Merged_df['MasVnrType'] = preprocessing_Merged_df['MasVnrType'].fillna(preprocessing_Merged_df['MasVnrType'].mode()[0])\n",
    "preprocessing_Merged_df['Utilities'] = preprocessing_Merged_df['Utilities'].fillna(preprocessing_Merged_df['Utilities'].mode()[0])\n",
    "preprocessing_Merged_df['Exterior2nd'] = preprocessing_Merged_df['Exterior2nd'].fillna(preprocessing_Merged_df['Exterior2nd'].mode()[0])\n",
    "preprocessing_Merged_df['Exterior1st'] = preprocessing_Merged_df['Exterior1st'].fillna(preprocessing_Merged_df['Exterior1st'].mode()[0])\n",
    "preprocessing_Merged_df['SaleType'] = preprocessing_Merged_df['SaleType'].fillna(preprocessing_Merged_df['SaleType'].mode()[0])\n",
    "\n",
    "# Replacing blank spaces with general / typical categories\n",
    "\n",
    "preprocessing_Merged_df['Functional'] = preprocessing_Merged_df['Functional'].fillna(\"Typ\")\n",
    "preprocessing_Merged_df['Electrical'] = preprocessing_Merged_df['Electrical'].fillna(\"SBrkr\")\n",
    "preprocessing_Merged_df['KitchenQual'] = preprocessing_Merged_df['KitchenQual'].fillna(\"TA\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replacing LotFrontage missing values\n",
    "preprocessing_Merged_df['LotFrontage'] = preprocessing_Merged_df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.mean()))\n",
    "\n",
    "# Replacing MSZoning missing values\n",
    "preprocessing_Merged_df['MSZoning'] = preprocessing_Merged_df.groupby('Neighborhood')['MSZoning'].transform(lambda x: x.fillna(x.mode()[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Total</th>\n",
       "      <th>%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Total, %]\n",
       "Index: []"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Table of Missing Values for the Merged Dataframe\n",
    "\n",
    "Total_Missing=preprocessing_Merged_df.isnull().sum().sort_values(ascending = False)[preprocessing_Merged_df.isnull().sum().sort_values(ascending = False) != 0]\n",
    "Percent_Missing=round(preprocessing_Merged_df.isnull().sum().sort_values(ascending = False)/len(preprocessing_Merged_df)*100,2)[round(preprocessing_Merged_df.isnull().sum().sort_values(ascending = False)/len(preprocessing_Merged_df)*100,2) != 0]\n",
    "Merged_Missing = pd.concat([Total_Missing,Percent_Missing], axis=1, keys=['Total','%'])\n",
    "Merged_Missing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing Sale Price from the list of features to be analyzed, as we already done some work on it\n",
    "quantitative.remove('SalePrice')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Getting the skewness of the quantitative features\n",
    "skewness_features = preprocessing_Merged_df[quantitative].skew().sort_values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\zhrht\\anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:3508: PearsonRConstantInputWarning: An input array is constant; the correlation coefficent is not defined.\n",
      "  warnings.warn(PearsonRConstantInputWarning())\n",
      "C:\\Users\\zhrht\\anaconda3\\lib\\site-packages\\scipy\\stats\\stats.py:3538: PearsonRNearConstantInputWarning: An input array is nearly constant; the computed correlation coefficent may be inaccurate.\n",
      "  warnings.warn(PearsonRNearConstantInputWarning())\n"
     ]
    }
   ],
   "source": [
    "# Features with absolute Skweness > 0.5\n",
    "skewed_features = skewness_features[abs(skewness_features) > 0.5]\n",
    "skewed_features = skewed_features.index\n",
    "\n",
    "#Box Cox Transformation\n",
    "for i in skewed_features:\n",
    "  preprocessing_Merged_df[i] = boxcox1p(preprocessing_Merged_df[i], boxcox_normmax(preprocessing_Merged_df[i]+1))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
